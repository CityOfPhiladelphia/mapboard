{"version":3,"file":"mapboard.js","sources":["../src/util/is-mobile-device.js","../src/store.js","../src/util/config-mixin.js","../src/components/TopicPanel.vue","../src/components/markers-mixin.js","../src/components/MapPanel.vue","../src/components/Mapboard.vue","../src/util/merge-deep.js","../src/util/unique-id.js","../src/main.js"],"sourcesContent":["export default function () {\r\n  const mobileOrTabletRegexA = /(android|bb\\d+|meego).+mobile|avantgo|bada\\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\\.(browser|link)|vodafone|wap|windows ce|xda|xiino|android|ipad|playbook|silk/i;\r\n  const mobileOrTabletRegexB = /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\\-(n|u)|c55\\/|capi|ccwa|cdm\\-|cell|chtm|cldc|cmd\\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\\-s|devi|dica|dmob|do(c|p)o|ds(12|\\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\\-|_)|g1 u|g560|gene|gf\\-5|g\\-mo|go(\\.w|od)|gr(ad|un)|haie|hcit|hd\\-(m|p|t)|hei\\-|hi(pt|ta)|hp( i|ip)|hs\\-c|ht(c(\\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\\-(20|go|ma)|i230|iac( |\\-|\\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\\/)|klon|kpt |kwc\\-|kyo(c|k)|le(no|xi)|lg( g|\\/(k|l|u)|50|54|\\-[a-w])|libw|lynx|m1\\-w|m3ga|m50\\/|ma(te|ui|xo)|mc(01|21|ca)|m\\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\\-2|po(ck|rt|se)|prox|psio|pt\\-g|qa\\-a|qc(07|12|21|32|60|\\-[2-7]|i\\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\\-|oo|p\\-)|sdk\\/|se(c(\\-|0|1)|47|mc|nd|ri)|sgh\\-|shar|sie(\\-|m)|sk\\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\\-|v\\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\\-|tdg\\-|tel(i|m)|tim\\-|t\\-mo|to(pl|sh)|ts(70|m\\-|m3|m5)|tx\\-9|up(\\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\\-|your|zeto|zte\\-/i;\r\n\r\n  // get the user agent and test against both regex patterns\r\n  const userAgent = (navigator.userAgent || navigator.vendor || window.opera || '');\r\n  const isMobileOrTablet = (mobileOrTabletRegexA.test(userAgent) ||\r\n                            mobileOrTabletRegexB.test(userAgent.substr(0,4)));\r\n\r\n  return isMobileOrTablet;\r\n};\r\n","import Vue from 'vue';\r\nimport Vuex from 'vuex';\r\nimport isMobileDevice from './util/is-mobile-device';\r\n\r\n// when you load vuex from a script tag this seems to happen automatically\r\nVue.use(Vuex);\r\n\r\n// this grabs horizontal table ids from an array of topic components,\r\n// recursively\r\nfunction getHorizontalTableIdsFromComps(comps = []) {\r\n  // console.log('getHorizontalTableIdsFromComps is running, comps:', comps);\r\n\r\n  let tableIds = [];\r\n\r\n  for (let comp of comps) {\r\n    const options = comp.options || {};\r\n    const innerComps = options.components || options.tables;\r\n\r\n    // if this is a \"group\" component, recurse\r\n    if (innerComps) {\r\n      const innerTableIds = getHorizontalTableIdsFromComps(innerComps);\r\n      tableIds = tableIds.concat(innerTableIds);\r\n      continue;\r\n    }\r\n\r\n    // skip comps that aren't horizontal tables\r\n    if (comp.type !== 'horizontal-table') {\r\n      continue;\r\n    }\r\n\r\n    const tableId = comp._id;\r\n\r\n    tableIds.push(tableId);\r\n  }\r\n\r\n  return tableIds;\r\n}\r\n\r\n// this makes the empty filtered data object given a list of topics.\r\nfunction createFilteredData(config) {\r\n  const topics = config.topics;\r\n  let tableIds = [];\r\n\r\n  for (let topic of topics) {\r\n    const comps = topic.components;\r\n    const compTableIds = getHorizontalTableIdsFromComps(comps);\r\n    tableIds = tableIds.concat(compTableIds);\r\n  }\r\n\r\n  // console.log('createFilteredData is running, tableIds:', tableIds);\r\n\r\n  // const filteredData = tableIds.reduce((acc, tableId) => {\r\n  //   acc[tableId] = [];\r\n  //   return acc;\r\n  // }, {});\r\n\r\n  let filteredData = {}\r\n  for (let index=0; index < tableIds.length; index++) {\r\n    filteredData[tableIds[index]] = [];\r\n  }\r\n\r\n  return filteredData;\r\n}\r\n\r\n// this grabs table group ids from an array of topic components\r\nfunction getHorizontalTableGroupIdsFromComps(comps = []) {\r\n  // console.log('getHorizontalTableGroupIdsFromComps is running, comps:', comps);\r\n  let tableGroupId;\r\n\r\n  for (let comp of comps) {\r\n    const options = comp.options || {};\r\n    const innerComps = options.components || options.tables;\r\n\r\n    // console.log('getHorizontalTableGroupIdsFromComps, comp:', comp);\r\n\r\n    // if this is a \"group\" component, recurse\r\n    if (!innerComps) {\r\n      continue;\r\n    }\r\n\r\n    // console.log('getTableGroupIdsFromComps, comp.type:', comp.type);\r\n\r\n    // skip comps that aren't horizontal tables\r\n    if (comp.type !== 'horizontal-table-group') {\r\n      continue;\r\n    }\r\n\r\n    tableGroupId = comp._id;\r\n    // console.log('getHorizontalTableGroupIdsFromComps, tableGroupId:', tableGroupId);\r\n  }\r\n\r\n  return tableGroupId;\r\n}\r\n\r\n// this makes the empty horizontalTableGroups object given a list of topics.\r\nfunction createHorizontalTableGroups(config) {\r\n  const topics = config.topics;\r\n\r\n  let tableGroupIds = [];\r\n\r\n  for (let topic of topics) {\r\n    const comps = topic.components;\r\n    const compTableGroupId = getHorizontalTableGroupIdsFromComps(comps);\r\n    if (compTableGroupId) tableGroupIds.push(compTableGroupId);\r\n  }\r\n  // console.log('createHorizontalTableGroups is running, config:', config, 'tableGroupIds:', tableGroupIds);\r\n\r\n  let horizontalTableGroups = {};\r\n\r\n  for (let tableGroupId of tableGroupIds) {\r\n    horizontalTableGroups[tableGroupId] = {\r\n      activeTable: null,\r\n      activeTableId: null\r\n    };\r\n  }\r\n  return horizontalTableGroups;\r\n}\r\n\r\nfunction createStore(config) {\r\n  // create initial state for sources. data key => {}\r\n  const sourceKeys = Object.keys(config.dataSources || {});\r\n  const sources = sourceKeys.reduce((o, key) => {\r\n    let val;\r\n    // if the source has targets, just set it to be an empty object\r\n    if (config.dataSources[key].targets) {\r\n      val = {\r\n        targets: {}\r\n      };\r\n    } else {\r\n      val = {\r\n       // we have to define these here, because vue can't observe properties that\r\n       // are added later.\r\n       status: null,\r\n       secondaryStatus: null,\r\n       data: null\r\n     };\r\n    }\r\n\r\n    o[key] = val;\r\n\r\n    return o;\r\n  }, {});\r\n\r\n  const parcelKeys = Object.keys(config.parcels || {});\r\n  const parcels = parcelKeys.reduce((o, key) => {\r\n    let val;\r\n    if (config.parcels[key].multipleAllowed) {\r\n      val = {\r\n        data: [],\r\n        status: null,\r\n        activeParcel: null,\r\n        activeAddress: null,\r\n        activeMapreg: null\r\n      };\r\n    } else {\r\n      val = null;\r\n      // val = {\r\n      //   geometry: null,\r\n      //   id: null,\r\n      //   properties: null,\r\n      //   type: null\r\n      // };\r\n    }\r\n\r\n    o[key] = val;\r\n\r\n    return o;\r\n  }, {});\r\n\r\n  const initialState = {\r\n    isMobileOrTablet: isMobileDevice(),\r\n    fullScreen: {\r\n      mapOnly: false,\r\n      topicsOnly: false,\r\n    },\r\n    fullScreenMapEnabled: false,\r\n    fullScreenTopicsEnabled: false,\r\n\r\n    popover: '',\r\n\r\n    // this gets set to the parcel layer for the default (aka first) topic in\r\n    // DataManager.resetGeocode, which is called by Router.hashChanged on app\r\n    // load.\r\n    activeTopic: '',\r\n    activeParcelLayer: '',\r\n\r\n    // the ais feature\r\n    clickCoords: null,\r\n    geocode: {\r\n      status: null,\r\n      data: null,\r\n      input: null,\r\n      related: null,\r\n    },\r\n    lastSearchMethod: 'geocode',\r\n    // the leaflet map object\r\n    map: {\r\n      location: {\r\n        lat: null,\r\n        lng: null\r\n      },\r\n      center: config.map.center,\r\n      bounds: {\r\n        northEast: null,\r\n        southWest: null,\r\n      },\r\n      zoom: config.map.zoom,\r\n      boundsBasedOnShape: null,\r\n      map: null,\r\n      // this gets set to the parcel layer for the default topic by\r\n      // DataManager.resetGeocode; see note above for activeTopic and\r\n      // activeParcelLayer.\r\n      basemap: '',\r\n      imagery: 'imagery2017',\r\n      shouldShowImagery: false,\r\n      // this is the key for the active overlay image (eg regmap)\r\n      imageOverlay: null,\r\n      imageOverlayOpacity: null,\r\n      filters: [],\r\n      watchPositionOn: false,\r\n    },\r\n    shouldShowAddressCandidateList: false,\r\n    candidates: [],\r\n    addressEntered: null,\r\n    parcels,\r\n    sources,\r\n    cyclomedia: {\r\n      initialized: false,\r\n      navBarOpen: false,\r\n      // surfaceCursorOn: true,\r\n      latLngFromMap: null,\r\n      orientation: {\r\n        yaw: null,\r\n        hFov: null,\r\n        xyz: null,\r\n      },\r\n      active: false,\r\n      recordings: [],\r\n    },\r\n    // we need this to know whether or not to force an update on the first show\r\n    pictometry: {\r\n      ipa: null,\r\n      active: false,\r\n      shapeIds: [],\r\n      pngMarkerIds: [],\r\n      zoom: null,\r\n      // this is the state of the main leaflet map. when these values change\r\n      // the pictometry widget should react. the reason these are duplicated\r\n      // here is to avoid an infinite loop in the Map component when the\r\n      // viewport changes.\r\n      map: {\r\n        center: config.map.center,\r\n        zoom: config.map.zoom\r\n      }\r\n    },\r\n    horizontalTables: {\r\n      // table id => filtered rows\r\n      filteredData: createFilteredData(config),\r\n    },\r\n    horizontalTableGroups: createHorizontalTableGroups(config),\r\n    activeFeature: {\r\n      featureId: null,\r\n      tableId: null\r\n    },\r\n\r\n    appData: {\r\n      propertyBalance: 0,\r\n    },\r\n  };\r\n\r\n  // TODO standardize how payloads are passed around/handled\r\n  return new Vuex.Store({\r\n    state: initialState,\r\n    getters: {\r\n      visibleTableIds(state) {\r\n        // get active topic\r\n        const activeTopic = state.activeTopic;\r\n\r\n        if (!activeTopic) {\r\n          return [];\r\n        }\r\n\r\n        // get horizontal table ids for that topic\r\n        const activeTopicConfig = (config.topics.filter(topic => topic.key === activeTopic) || [])[0];\r\n        const comps = activeTopicConfig.components;\r\n\r\n        const compTableGroup = getHorizontalTableGroupIdsFromComps(comps);\r\n        if (compTableGroup) {\r\n          // even though there is only 1 value, it has to be in array form in the state\r\n          const array = [];\r\n          array.push(state.horizontalTableGroups[compTableGroup].activeTableId);\r\n          return array;\r\n        } else {\r\n          const compTables = getHorizontalTableIdsFromComps(comps);\r\n          return compTables;\r\n        }\r\n      }\r\n    },\r\n    mutations: {\r\n      setCyclomediaInitialized(state, payload) {\r\n        state.cyclomedia.initialized = payload;\r\n      },\r\n      setIsMobileOrTablet(state, payload) {\r\n        state.isMobileOrTablet = payload;\r\n      },\r\n      setMapOnly(state, payload) {\r\n        state.fullScreen.mapOnly = payload;\r\n      },\r\n      setTopicsOnly(state, payload) {\r\n        state.fullScreen.topicsOnly = payload;\r\n      },\r\n      setFullScreenMapEnabled(state, payload) {\r\n        state.fullScreenMapEnabled = payload;\r\n      },\r\n      setFullScreenTopicsEnabled(state, payload) {\r\n        state.fullScreenTopicsEnabled = payload;\r\n      },\r\n      setLocation(state, payload) {\r\n        state.map.location.lat = payload.lat;\r\n        state.map.location.lng = payload.lng;\r\n      },\r\n      setWatchPositionOn(state, payload) {\r\n        state.map.watchPositionOn = payload;\r\n      },\r\n      setClickCoords(state, payload) {\r\n        state.clickCoords = payload;\r\n      },\r\n      setHorizontalTableGroupActiveTable(state, payload) {\r\n        // console.log('setHorizontalTableGroupActiveTable, payload:', payload);\r\n        state.horizontalTableGroups[payload.tableGroupId].activeTableId = payload.activeTableId;\r\n        state.horizontalTableGroups[payload.tableGroupId].activeTable = payload.activeTable;\r\n      },\r\n      setHorizontalTableFilteredData(state, payload) {\r\n        const { tableId, data } = payload;\r\n\r\n        // check for not-null table id\r\n        if (!tableId) return;\r\n\r\n        state.horizontalTables.filteredData[tableId] = data;\r\n      },\r\n      setActiveTopic(state, payload) {\r\n        state.activeTopic = payload;\r\n      },\r\n      setActiveParcelLayer(state, payload) {\r\n        state.activeParcelLayer = payload;\r\n      },\r\n      setSourceStatus(state, payload) {\r\n        const key = payload.key;\r\n        const status = payload.status;\r\n\r\n        // if a target id was passed in, set the status for that target\r\n        const targetId = payload.targetId;\r\n\r\n        if (targetId) {\r\n          // console.log('store.js setSourceStatus, key:', key, 'status:', status, 'targetId:', targetId);\r\n          state.sources[key].targets[targetId].status = status;\r\n        } else {\r\n          state.sources[key].status = status;\r\n        }\r\n      },\r\n      setSecondarySourceStatus(state, payload) {\r\n        const key = payload.key;\r\n        const secondaryStatus = payload.secondaryStatus;\r\n\r\n        // if a target id was passed in, set the status for that target\r\n        const targetId = payload.targetId;\r\n\r\n        // if (targetId) {\r\n        //   state.sources[key].targets[targetId].status = status;\r\n        // } else {\r\n        state.sources[key].secondaryStatus = secondaryStatus;\r\n        // }\r\n      },\r\n      setSourceData(state, payload) {\r\n        // console.log('store setSourceData payload:', payload);\r\n        const key = payload.key;\r\n        const data = payload.data;\r\n\r\n        // if a target id was passed in, set the data object for that target\r\n        const targetId = payload.targetId;\r\n\r\n        if (targetId) {\r\n          if (state.sources[key].targets[targetId]) {\r\n            state.sources[key].targets[targetId].data = data;\r\n          }\r\n        } else {\r\n          state.sources[key].data = data;\r\n        }\r\n      },\r\n      setSourceDataMore(state, payload) {\r\n        const key = payload.key;\r\n        const data = payload.data;\r\n        const nextPage = payload.page;\r\n        const oldData = state.sources[key].data;\r\n        // console.log('oldData features', oldData.features, 'data features', data.features);\r\n        const allData = oldData.features.concat(data.features);\r\n        // console.log('allData', allData);\r\n        // if a target id was passed in, set the data object for that target\r\n        // const targetId = payload.targetId;\r\n\r\n        // if (targetId) {\r\n        //   state.sources[key].targets[targetId].data = data;\r\n        // } else {\r\n\r\n        state.sources[key].data.features = allData;\r\n        state.sources[key].data.page = nextPage;\r\n        // }\r\n      },\r\n      setMapFilters(state, payload) {\r\n        state.map.filters = payload;\r\n      },\r\n      // this sets empty targets for a data source\r\n      createEmptySourceTargets(state, payload) {\r\n        const {key, targetIds} = payload;\r\n        state.sources[key].targets = targetIds.reduce((acc, targetId) => {\r\n          acc[targetId] = {\r\n            status: null,\r\n            data: null\r\n          };\r\n          return acc;\r\n        }, {});\r\n      },\r\n      clearSourceTargets(state, payload) {\r\n        const key = payload.key;\r\n        state.sources[key].targets = {};\r\n      },\r\n      setMap(state, payload) {\r\n        state.map.map = payload.map;\r\n      },\r\n      // this is the map center as an xy coordinate array (not latlng)\r\n      setMapCenter(state, payload) {\r\n        state.map.center = payload;\r\n      },\r\n      setMapZoom(state, payload) {\r\n        state.map.zoom = payload;\r\n      },\r\n      setMapBounds(state, payload) {\r\n        // const { northEast, southWest } = payload || {};\r\n        // state.map.bounds.northEast = northEast;\r\n        // state.map.bounds.southWest = southWest;\r\n        state.map.bounds = payload;\r\n      },\r\n      setMapBoundsBasedOnShape(state, payload) {\r\n        state.map.boundsBasedOnShape = payload\r\n      },\r\n      setParcelData(state, payload) {\r\n        // console.log('store setParcelData payload:', payload);\r\n        const { parcelLayer, data, multipleAllowed, status, activeParcel, activeAddress, activeMapreg } = payload || {};\r\n        // console.log('store setParcelData parcelLayer:', parcelLayer, 'data:', data, 'multipleAllowed:', multipleAllowed, 'status:', status, 'activeParcel:', activeParcel);\r\n        if (!multipleAllowed) {\r\n          state.parcels[parcelLayer] = data;\r\n        } else {\r\n          state.parcels[parcelLayer].data = data;\r\n          state.parcels[parcelLayer].status = status;\r\n          state.parcels[parcelLayer].activeParcel = activeParcel;\r\n          state.parcels[parcelLayer].activeAddress = activeAddress;\r\n          state.parcels[parcelLayer].activeMapreg = activeMapreg;\r\n        }\r\n      },\r\n      setActiveParcel(state, payload) {\r\n        // console.log('store setActiveParcel:', payload)\r\n        const { parcelLayer, activeParcel, activeAddress, activeMapreg } = payload || {};\r\n        state.parcels[parcelLayer].activeParcel = activeParcel;\r\n        state.parcels[parcelLayer].activeAddress = activeAddress;\r\n        state.parcels[parcelLayer].activeMapreg = activeMapreg;\r\n      },\r\n      // setDorParcelData(state, payload) {\r\n      //   state.dorParcels.data = payload;\r\n      //   // state.parcels.dor.data = payload;\r\n      // },\r\n      // setDorParcelStatus(state, payload) {\r\n      //   state.dorParcels.status = payload;\r\n      //   // state.parcels.dor.status = payload;\r\n      // },\r\n      // setActiveDorParcel(state, payload) {\r\n      //   state.activeDorParcel = payload;\r\n      //   // state.parcels.dor.activeParcel = payload;\r\n      // },\r\n      // setActiveDorAddress(state, payload) {\r\n      //   state.activeDorAddress = payload;\r\n      //   // state.parcels.dor.activeAddress = payload;\r\n      // },\r\n      // setActiveDorMapreg(state, payload) {\r\n      //   state.activeDorMapreg = payload;\r\n      //   // state.parcels.dor.activeMapreg = payload;\r\n      // },\r\n      // setPwdParcel(state, payload) {\r\n      //   state.pwdParcel = payload;\r\n      //   // state.parcels.pwd = payload;\r\n      // },\r\n      setGeocodeStatus(state, payload) {\r\n        state.geocode.status = payload;\r\n      },\r\n      setGeocodeData(state, payload) {\r\n        state.geocode.data = payload;\r\n      },\r\n      setGeocodeRelated(state, payload) {\r\n        state.geocode.related = payload;\r\n      },\r\n      setGeocodeInput(state, payload) {\r\n        state.geocode.input = payload;\r\n      },\r\n      setBasemap(state, payload) {\r\n        state.map.basemap = payload;\r\n      },\r\n      setImagery(state, payload) {\r\n        state.map.imagery = payload;\r\n      },\r\n      setShouldShowImagery(state, payload) {\r\n        state.map.shouldShowImagery = payload;\r\n      },\r\n      setPictometryActive(state, payload) {\r\n        if (!config.pictometry.enabled) {\r\n          return;\r\n        }\r\n        state.pictometry.active = payload;\r\n      },\r\n      setCyclomediaActive(state, payload) {\r\n        if (!config.cyclomedia.enabled) {\r\n          return;\r\n        }\r\n        state.cyclomedia.active = payload;\r\n      },\r\n      setCyclomediaYaw(state, payload) {\r\n        state.cyclomedia.orientation.yaw = payload\r\n      },\r\n      setCyclomediaHFov(state, payload) {\r\n        state.cyclomedia.orientation.hFov = payload\r\n      },\r\n      setCyclomediaXyz(state, payload) {\r\n        state.cyclomedia.orientation.xyz = payload\r\n      },\r\n      setCyclomediaRecordings(state, payload) {\r\n        state.cyclomedia.recordings = payload;\r\n      },\r\n      setCyclomediaLatLngFromMap(state, payload) {\r\n        state.cyclomedia.latLngFromMap = payload;\r\n        // const { lat, lng } = payload || {};\r\n        // state.cyclomedia.latLngFromMap[0] = lat;\r\n        // state.cyclomedia.latLngFromMap[1] = lng;\r\n      },\r\n      setCyclomediaNavBarOpen(state, payload) {\r\n        state.cyclomedia.navBarOpen = payload;\r\n      },\r\n      // setCyclomediaSurfaceCursorOn(state, payload) {\r\n      //   state.cyclomedia.surfaceCursorOn = payload;\r\n      // },\r\n      setActiveFeature(state, payload) {\r\n        // console.log('store setActiveFeature is running');\r\n        const { featureId, tableId } = payload || {};\r\n        const nextActiveFeature = { featureId, tableId };\r\n        state.activeFeature = nextActiveFeature;\r\n      },\r\n      setLastSearchMethod(state, payload) {\r\n        state.lastSearchMethod = payload;\r\n      },\r\n      setPictometryIpa(state, payload) {\r\n        state.pictometry.ipa = payload;\r\n      },\r\n      setPictometryShapeIds(state, payload) {\r\n        state.pictometry.shapeIds = payload;\r\n      },\r\n      setPictometryPngMarkerIds(state, payload) {\r\n        state.pictometry.pngMarkerIds = payload;\r\n      },\r\n      // this is the leaflet map center updated when the map is moved\r\n      setPictometryMapCenter(state, payload) {\r\n        state.pictometry.map.center = payload;\r\n      },\r\n      setPictometryMapZoom(state, payload) {\r\n        state.pictometry.map.zoom = payload;\r\n      },\r\n      setPictometryZoom(state, payload) {\r\n        state.pictometry.zoom = payload;\r\n      },\r\n      setImageOverlay(state, payload) {\r\n        state.map.imageOverlay = payload;\r\n      },\r\n      setImageOverlayOpacity(state, payload) {\r\n        state.map.imageOverlayOpacity = payload;\r\n      },\r\n      // setCircleMarkers(state, payload) {\r\n      //   state.map.circleMarkers.push(payload);\r\n      // }\r\n      setShouldShowAddressCandidateList(state, payload) {\r\n        state.shouldShowAddressCandidateList = payload;\r\n      },\r\n      setCandidates(state, payload) {\r\n        state.candidates = payload;\r\n      },\r\n      setAddressEntered(state, payload) {\r\n        state.addressEntered = payload;\r\n      },\r\n\r\n      setPropertyBalance(state, payload) {\r\n        state.appData.propertyBalance = payload;\r\n      },\r\n      setPopover(state, data) {\r\n  \t\t\tstate.popover = data;\r\n  \t\t},\r\n    }\r\n  });\r\n}\r\n\r\nexport default createStore;\r\n","// shout out to airyland\r\n// https://github.com/airyland/vue-config/blob/master/index.js\r\n\r\nexport default (Vue, config) => {\r\n  Vue.mixin({\r\n    created() {\r\n      this.$config = config;\r\n    }\r\n  });\r\n};\r\n","<template>\r\n  <div id=\"topic-panel-container\"\r\n       :class=\"'mb-panel-topics cell ' + this.topicPanelContainerClass\"\r\n  >\r\n    <full-screen-topics-toggle-tab v-once\r\n                                   v-if=\"!this.fullScreenTopicsOnly\"\r\n    />\r\n\r\n    <!-- address header - it only shows if the app is set to \"fullScreenTopicsOnly\" or there is a geocode -->\r\n    <div class=\"address-header cell small-24 medium-24\"\r\n         v-if=\"this.shouldShowAddressHeader\"\r\n    >\r\n      <div :class=\"'address-container columns ' +  this.addressContainerClass\"\r\n           :style=\"this.addressContainerStyle\"\r\n      >\r\n\r\n        <h1 class=\"address-header-line-1\">\r\n        <!-- there is no map marker if there is no map -->\r\n          <i class=\"fa fa-map-marker\"\r\n             v-if=\"!this.fullScreenTopicsOnly\"\r\n          ></i>\r\n          {{ address }}\r\n        </h1>\r\n        <div class=\"address-header-line-2\"\r\n             v-show=\"!this.geocode\"\r\n        >\r\n\r\n        </div>\r\n        <div class=\"address-header-line-2\"\r\n             v-show=\"this.geocode\"\r\n        >\r\n          PHILADELPHIA, PA {{ zipCode }}\r\n        </div>\r\n      </div>\r\n\r\n      <div class=\"address-input-container columns small-24 medium-12 large-12\"\r\n           :style=\"this.addressInputContainerStyle\"\r\n           v-if=\"this.fullScreenTopicsEnabled && !this.stacked || this.fullScreenTopicsOnly\"\r\n      >\r\n        <address-input :widthFromConfig=\"this.addressInputWidth\"\r\n                       :placeholder=\"this.addressInputPlaceholder\"\r\n        >\r\n          <address-candidate-list v-if=\"this.addressAutocompleteEnabled\"\r\n                                  slot=\"address-candidates-slot\"\r\n                                  :widthFromConfig=\"this.addressInputWidth\"\r\n          />\r\n        />\r\n      </div>\r\n\r\n    </div>\r\n\r\n    <!-- before search -->\r\n    <div v-if=\"shouldShowGreeting\"\r\n         class=\"topics-container cell medium-cell-block-y\"\r\n         :style=\"topicsContainerStyle\"\r\n    >\r\n      <greeting v-show=\"shouldShowGreeting\" />\r\n    </div>\r\n\r\n    <!-- after search -->\r\n    <div v-if=\"!shouldShowGreeting\" class=\"topic-panel-content\">\r\n      <div\r\n           class=\"topics-container cell medium-cell-block-y\"\r\n           :style=\"topicsContainerStyle\"\r\n      >\r\n        <topic-component-group :topic-components=\"this.$config.components\" />\r\n      </div>\r\n    </div>\r\n\r\n  </div>\r\n</template>\r\n\r\n<script>\r\n  import philaVueComps from '@cityofphiladelphia/phila-vue-comps';\r\n  const Topic = philaVueComps.Topic;\r\n  const TopicComponentGroup = philaVueComps.TopicComponentGroup;\r\n  const Greeting = philaVueComps.Greeting;\r\n  const AddressInput = philaVueComps.AddressInput;\r\n  const AddressCandidateList = philaVueComps.AddressCandidateList;\r\n  const FullScreenTopicsToggleTab = philaVueComps.FullScreenTopicsToggleTab;\r\n\r\n  export default {\r\n    components: {\r\n      Greeting,\r\n      TopicComponentGroup,\r\n      Topic,\r\n      AddressInput,\r\n      AddressCandidateList,\r\n      FullScreenTopicsToggleTab,\r\n    },\r\n    data() {\r\n      const data = {\r\n        topicsContainerStyle: {\r\n          'overflow-y': 'auto',\r\n          'height': '100px',\r\n          'min-height': '100px',\r\n        },\r\n        addressContainerStyle: {\r\n          'height': '100%',\r\n          'align-items': 'flex-start',\r\n          'padding-left': '20px',\r\n          'padding-top': '20px',\r\n          'padding-bottom': '20px',\r\n        },\r\n        addressInputContainerStyle: {\r\n          'height': '100%',\r\n          'align-items': 'center',\r\n          'padding-top': '10px',\r\n          'padding-bottom': '10px',\r\n        },\r\n        stacked: false,\r\n      };\r\n      return data;\r\n    },\r\n    mounted() {\r\n      window.addEventListener('click', this.closeAddressCandidateList);\r\n      window.addEventListener('resize', this.handleWindowResize);\r\n      this.handleWindowResize(25);\r\n    },\r\n    watch: {\r\n      geocodeStatus() {\r\n        this.handleWindowResize();\r\n      }\r\n    },\r\n    computed: {\r\n      shouldShowAddressHeader() {\r\n        if (this.fullScreenTopicsOnly || this.shouldShowGreeting === false) {\r\n          return true;\r\n        } else {\r\n          return false;\r\n        }\r\n      },\r\n      inputAlign() {\r\n        if (this.$config.addressInput) {\r\n          if (this.$config.addressInput.position) {\r\n            const position = this.$config.addressInput.position;\r\n            switch(position) {\r\n              case 'left':\r\n              return 'flex-start';\r\n              case 'right':\r\n              return 'flex-end';\r\n              case 'center':\r\n              return 'center';\r\n            }\r\n          } else {\r\n            return 'flex-start';\r\n          }\r\n        } else {\r\n          return 'flex-start';\r\n        }\r\n      },\r\n      addressInputWidth() {\r\n        if (this.$config.addressInput) {\r\n          return this.$config.addressInput.width;\r\n        } else {\r\n          return 415;\r\n        }\r\n      },\r\n      addressInputPlaceholder() {\r\n        if (this.$config.addressInput) {\r\n          return this.$config.addressInput.placeholder;\r\n        } else {\r\n          return null\r\n        }\r\n      },\r\n      addressAutocompleteEnabled() {\r\n        if (this.$config.addressInput) {\r\n          if (this.$config.addressInput.autocompleteEnabled === true) {\r\n            return true;\r\n          } else {\r\n            return false;\r\n          }\r\n        } else {\r\n          return false;\r\n        }\r\n      },\r\n      fullScreenMapEnabled() {\r\n        return this.$store.state.fullScreenMapEnabled;\r\n      },\r\n      fullScreenTopicsEnabled() {\r\n        return this.$store.state.fullScreenTopicsEnabled;\r\n      },\r\n      fullScreenTopicsOnly() {\r\n        return this.$store.state.fullScreen.topicsOnly;\r\n      },\r\n      topicPanelContainerClass() {\r\n        if (this.fullScreenTopicsEnabled || this.fullScreenTopicsOnly) {\r\n          return 'medium-24 small-order-2 medium-order-1';\r\n        } else if (this.fullScreenMapEnabled) {\r\n          return 'medium-1 small-order-2 medium-order-1';\r\n        } else {\r\n          return 'medium-12 small-order-2 medium-order-1';\r\n        }\r\n      },\r\n      addressContainerClass() {\r\n        if (this.fullScreenTopicsEnabled || this.fullScreenTopicsOnly) {\r\n          return 'small-24 medium-12 large-12';\r\n        } else {\r\n          return 'small-24';\r\n        }\r\n      },\r\n      geocode() {\r\n        return this.$store.state.geocode.data;\r\n      },\r\n      geocodeStatus() {\r\n        return this.$store.state.geocode.status;\r\n      },\r\n      dorParcels() {\r\n        return this.$store.state.parcels.dor.data.length > 0;\r\n      },\r\n      shouldShowGreeting() {\r\n        return !(this.geocode || this.dorParcels);\r\n      },\r\n      // this returns the address shown in the address header\r\n      address() {\r\n        const geocode = this.geocode;\r\n        const dorParcels = this.$store.state.parcels.dor.data;\r\n        const activeDorAddress = this.$store.state.parcels.dor.activeAddress;\r\n        let address;\r\n        if (this.$config.defaultAddressTextPlaceholder) {\r\n          address = this.$config.defaultAddressTextPlaceholder;\r\n        }\r\n\r\n        if (geocode) {\r\n          // TODO make this not ais-specific\r\n          // REVIEW what's the difference between these two?\r\n          const addressA = geocode.properties.street_address;\r\n          const addressB = geocode.street_address;\r\n\r\n          address = addressA || addressB;\r\n\r\n        // a DOR address might be found even if there is no geocode\r\n        } else if (activeDorAddress) {\r\n          address = activeDorAddress;\r\n        }\r\n\r\n        return address;\r\n      },\r\n      zipCode() {\r\n        const geocode = this.geocode;\r\n        if (!geocode) return null;\r\n        const zipCode = geocode.properties.zip_code;\r\n        const zip4 = geocode.properties.zip_4;\r\n        const parts = [zipCode];\r\n        if (zip4) parts.push(zip4);\r\n        return parts.join('-');\r\n      },\r\n    },\r\n    methods: {\r\n      closeAddressCandidateList() {\r\n        this.$store.state.shouldShowAddressCandidateList = false;\r\n      },\r\n      handleWindowResize(pixelAdjustment) {\r\n        // this is called to run when:\r\n        // 1 - TopicPanel.vue mounted\r\n        // 2 - geocodeStatus change\r\n        // 3 - any resizing of the window\r\n\r\n        const windowHeight = $(window).height();\r\n        // const siteHeaderHeightNum = parseInt(window.getComputedStyle(document.getElementsByClassName('site-header')[0]).getPropertyValue('height').replace('px', ''));\r\n        const siteHeaderHeightNum = parseInt(document.getElementsByClassName('site-header')[0].getBoundingClientRect().height);\r\n        // const appFooterHeightNum = parseInt(window.getComputedStyle(document.getElementsByClassName('app-footer')[0]).getPropertyValue('height').replace('px', ''));\r\n        const appFooterHeightNum = parseInt(document.getElementsByClassName('app-footer')[0].getBoundingClientRect().height);\r\n        let topicsHeight;\r\n\r\n        if (this.shouldShowAddressHeader) {\r\n          if (document.getElementsByClassName('address-header')[0]) {\r\n            // const addressHeaderHeightNum = parseInt(window.getComputedStyle(document.getElementsByClassName('address-header')[0]).getPropertyValue('height').replace('px', ''));\r\n            const addressHeaderHeightNum = parseInt(document.getElementsByClassName('address-header')[0].getBoundingClientRect().height);\r\n            topicsHeight = windowHeight - siteHeaderHeightNum - appFooterHeightNum - addressHeaderHeightNum;\r\n            // console.log('handleWindowResize shouldShowAddressHeader and it was found, window-height:', windowHeight, 'SiteHeaderHeight:', siteHeaderHeightNum, 'addressHeaderHeight:', addressHeaderHeightNum, 'appFooterHeight:', appFooterHeightNum, 'topicsHeight:', topicsHeight);\r\n            if (typeof pixelAdjustment === 'number') {\r\n              // console.log('handleWindowResize if pixelAdjustment is true, window-height:', windowHeight, 'SiteHeaderHeight:', siteHeaderHeightNum, 'addressHeaderHeight:', addressHeaderHeightNum, 'appFooterHeight:', appFooterHeightNum, 'topicsHeight:', topicsHeight, 'pixelAdjustment:', pixelAdjustment);\r\n              topicsHeight = topicsHeight - pixelAdjustment;\r\n            }\r\n          } else {\r\n            topicsHeight = windowHeight - siteHeaderHeightNum - appFooterHeightNum - 103;\r\n            // console.log('handleWindowResize shouldShowAddressHeader but it was not found so it is using the hardcoded 103, window-height:', windowHeight, 'SiteHeaderHeight:', siteHeaderHeightNum, 'appFooterHeight:', appFooterHeightNum, 'topicsHeight:', topicsHeight);\r\n          }\r\n        } else {\r\n          topicsHeight = windowHeight - siteHeaderHeightNum - appFooterHeightNum;\r\n          // console.log('handleWindowResize shouldShowAddressHeader is NOT true, window-height:', windowHeight, 'SiteHeaderHeight:', siteHeaderHeightNum, 'appFooterHeight:', appFooterHeightNum, 'topicsHeight:', topicsHeight);\r\n        }\r\n\r\n        if ($(window).width() >= 750) {\r\n          this.stacked = false;\r\n          this.addressContainerStyle = {\r\n            'height': '100%',\r\n            'align-items': 'flex-start',\r\n            'padding-left': '20px',\r\n            'padding-top': '20px',\r\n            'padding-bottom': '20px',\r\n          }\r\n          this.addressInputContainerStyle = {\r\n            'height': '100%',\r\n            'align-items': this.inputAlign,\r\n            'padding-top': '30px',\r\n            'padding-bottom': '30px',\r\n          }\r\n          this.topicsContainerStyle.height = topicsHeight.toString() + 'px';\r\n          this.topicsContainerStyle['min-height'] = topicsHeight.toString() + 'px';\r\n          this.topicsContainerStyle['overflow-y'] = 'auto';\r\n\r\n        } else {\r\n          this.stacked = true;\r\n          this.addressContainerStyle = {\r\n            'height': 'auto',\r\n            'align-items': 'center',\r\n            'padding-left': '0px',\r\n            'padding-top': '10px',\r\n            'padding-bottom': '10px',\r\n          }\r\n          this.addressInputContainerStyle = {\r\n            'height': 'auto',\r\n            'align-items': 'center',\r\n            'padding-top': '10px',\r\n            'padding-bottom': '10px',\r\n          }\r\n          this.topicsContainerStyle.height = 'auto';\r\n          this.topicsContainerStyle['min-height'] = topicsHeight.toString() + 'px';\r\n          this.topicsContainerStyle['overflow-y'] = 'hidden';\r\n        }\r\n      }\r\n    }\r\n  };\r\n</script>\r\n\r\n<style scoped>\r\n  /*don't highlight any form elements*/\r\n  input:focus,\r\n  select:focus,\r\n  textarea:focus,\r\n  button:focus {\r\n    outline: none;\r\n  }\r\n\r\n  /* standards applies padding to buttons, which causes some weirdness with\r\n  buttons on the map panel. override here. */\r\n  button {\r\n    padding: inherit;\r\n  }\r\n\r\n  .mb-panel-topics {\r\n    position: relative;\r\n  }\r\n\r\n  .address-header {\r\n    background: #daedfe;\r\n    color: #0f4d90;\r\n\r\n    /*this keeps the box shadow over the scrollable part of the panel*/\r\n    position: relative;\r\n    z-index: 1;\r\n\r\n    -webkit-box-shadow: 0px 5px 7px -2px rgba(0,0,0,0.18);\r\n    -moz-box-shadow: 0px 5px 7px -2px rgba(0,0,0,0.18);\r\n    box-shadow: 0px 5px 7px -2px rgba(0,0,0,0.18);\r\n    margin-bottom: -5px !important;\r\n    display: inline-block;\r\n  }\r\n\r\n  .address-header-line-1 {\r\n    margin-bottom: 0;\r\n    margin-top: 0;\r\n    padding: 0px !important;\r\n  }\r\n\r\n  .address-header-line-2 {\r\n    padding: 0px;\r\n  }\r\n\r\n  .address-container {\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: center;\r\n  }\r\n\r\n  .address-input-container {\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: center;\r\n  }\r\n\r\n  .topics-container {\r\n    padding: 26px;\r\n    position: relative;\r\n    overflow-x: hidden;\r\n  }\r\n\r\n</style>\r\n","export default {\r\n  watch: {\r\n    activeFeature(nextActiveFeature, prevActiveFeature) {\r\n      // console.log('WATCH active feature', prevActiveFeature, '=>', nextActiveFeature);\r\n\r\n      const layerMap = this.$store.state.map.map._layers;\r\n      const layers = Object.values(layerMap);\r\n\r\n      let updateFeaturePrev,\r\n          updateFeatureNext,\r\n          tableId,\r\n          featureIdPrev,\r\n          featureIdNext,\r\n          matchingLayerNext,\r\n          matchingLayerPrev;\r\n\r\n      if (prevActiveFeature && prevActiveFeature.tableId && prevActiveFeature.featureId) {\r\n        updateFeaturePrev = prevActiveFeature;\r\n        tableId = updateFeaturePrev.tableId\r\n        featureIdPrev = updateFeaturePrev.featureId;\r\n        matchingLayerPrev = layers.filter(layer => {\r\n          const options = layer.options || {};\r\n          const data = options.data;\r\n          if (!data) return;\r\n          const layerFeatureId = data.featureId;\r\n          const layerTableId = data.tableId;\r\n          return layerFeatureId === featureIdPrev && layerTableId === tableId;\r\n        })[0];\r\n        this.updateMarkerFillColor(matchingLayerPrev);\r\n      }\r\n\r\n      if (nextActiveFeature && nextActiveFeature.tableId && nextActiveFeature.featureId) {\r\n        updateFeatureNext = nextActiveFeature;\r\n        tableId = updateFeatureNext.tableId\r\n        featureIdNext = updateFeatureNext.featureId;\r\n        matchingLayerNext = layers.filter(layer => {\r\n          const options = layer.options || {};\r\n          const data = options.data;\r\n          if (!data) return;\r\n          const layerFeatureId = data.featureId;\r\n          const layerTableId = data.tableId;\r\n          return layerFeatureId === featureIdNext && layerTableId === tableId;\r\n        })[0];\r\n        this.updateMarkerFillColor(matchingLayerNext);\r\n        this.bringMarkerToFront(matchingLayerNext);\r\n      }\r\n\r\n    },\r\n  },\r\n  computed: {\r\n    locationMarker() {\r\n      const latlngArray = [this.$store.state.map.location.lat, this.$store.state.map.location.lng]\r\n      const marker = {\r\n        latlng: latlngArray,\r\n        radius: 6,\r\n        fillColor: '#ff3f3f',\r\n        color: '#ff0000',\r\n        weight: 1,\r\n        opacity: 1,\r\n        fillOpacity: 1.0\r\n      }\r\n      return marker;\r\n    },\r\n    // returns map markers as simple object with a geometry property, key,\r\n    // and optional properties for symbology\r\n    markers() {\r\n      const markers = [];\r\n\r\n      // geocoded address marker\r\n      const geocodeGeom = this.geocodeGeom;\r\n      if (this.identifyFeature === 'address-marker' && geocodeGeom) {\r\n        const latlng = [...geocodeGeom.coordinates].reverse();\r\n        const key = this.geocodeResult.properties.street_address;\r\n        const color = '#2176d2';\r\n        const markerType = 'geocode';\r\n        const addressMarker = {latlng, key, color, markerType};\r\n        markers.push(addressMarker);\r\n      }\r\n\r\n      // marker for topic from config\r\n      const topicMarker = this.activeTopicConfig.marker;\r\n      // console.log('topicMarker', topicMarker);\r\n      if (topicMarker) {\r\n        const markerPath = topicMarker['path'];\r\n        let path = this.$store.state.sources;\r\n        for (let level of markerPath) {\r\n          console.log('level:', level, 'path:', path);\r\n          if (path !== null && path !== undefined) {\r\n            path = path[level];\r\n          }\r\n        }\r\n        if (path !== null && path !== undefined) {\r\n          const latlng = [path[topicMarker.lat], path[topicMarker.lng]];\r\n          const key = path[topicMarker.key];\r\n          const color = topicMarker.color || 'green';\r\n          const markerType = 'overlay';\r\n          const markerObject = {latlng, key, color, markerType};\r\n          markers.push(markerObject);\r\n        }\r\n      }\r\n\r\n      return markers;\r\n    },\r\n    circleMarkers() {\r\n      const filteredData = this.$store.state.horizontalTables.filteredData;\r\n      // const filteredData = this.filteredData;\r\n      let circleMarkers = [];\r\n\r\n      // get visible tables based on active topic\r\n      const tableIds = this.$store.getters.visibleTableIds;\r\n\r\n      // console.log('computed circleMarkers is rerunning, filteredData:', filteredData, 'tableIds:', tableIds);\r\n\r\n      for (let tableId of tableIds) {\r\n        const tableConfig = this.getConfigForTable(tableId) || {};\r\n        // console.log('tableId:', tableId, 'tableConfig:', tableConfig);\r\n        const mapOverlay = (tableConfig.options || {}).mapOverlay;\r\n\r\n        if (!mapOverlay || mapOverlay.marker !== 'circle') {\r\n          continue;\r\n        }\r\n\r\n        const items = filteredData[tableId];\r\n\r\n        if (items.length < 1) {\r\n          continue;\r\n        }\r\n\r\n        const style = mapOverlay.style;\r\n\r\n        // go through rows\r\n        for (let item of items) {\r\n          // console.log('tableId', tableId)\r\n          let latlng;\r\n\r\n          // TODO - get geometry field name from config\r\n          if (item.geometry) {\r\n            const [x, y] = item.geometry.coordinates;\r\n            latlng = [y, x];\r\n          } else if (item.lat) {\r\n            latlng = [item.lat, item.lng]\r\n            // if (item.point_x) {\r\n            //   latlng = [item.point_y, item.point_x];\r\n            // } else if (item.geocode_x) {\r\n            //   latlng = [item.geocode_y, item.geocode_x];\r\n            // }\r\n          }\r\n\r\n          // check for active feature TODO - bind style props to state\r\n          let props = Object.assign({}, style);\r\n          props.latlng = latlng;\r\n          props.featureId = item._featureId;\r\n          props.tableId = tableId;\r\n          circleMarkers.push(props);\r\n        }\r\n      }\r\n\r\n      return circleMarkers;\r\n    },\r\n\r\n    // returns all geojson features to be rendered on the map along with\r\n    // necessary props.\r\n    geojsonFeatures() {\r\n      const features = [];\r\n\r\n      const identifyFeature = this.identifyFeature;\r\n      const activeParcelLayer = this.activeParcelLayer;\r\n\r\n      // TODO - get pwd parcel and dor parcel into the config file\r\n      // pwd parcel\r\n      if (identifyFeature === 'pwd-parcel' && activeParcelLayer === 'pwd' && this.pwdParcel) {\r\n        let props = {};\r\n        props.geojson = this.pwdParcel;\r\n        props.color = 'blue';\r\n        props.fillColor = 'blue';\r\n        props.weight = 2;\r\n        props.opacity = 1;\r\n        props.fillOpacity = 0.3;\r\n        props.key = props.geojson.properties.PARCELID;\r\n        features.push(props);\r\n\r\n      // dor parcel\r\n      } else if (identifyFeature === 'dor-parcel' && activeParcelLayer === 'dor') {\r\n        const color = 'blue';\r\n        const dorParcelFeatures = this.dorParcels.map(dorParcel => {\r\n          let props = {};\r\n          props.geojson = dorParcel;\r\n          props.color = 'blue';\r\n          props.fillColor = 'blue';\r\n          props.weight = 2;\r\n          props.opacity = 1;\r\n          props.fillOpacity = 0.3;\r\n          props.key = dorParcel.properties.OBJECTID;\r\n          return props;\r\n        });\r\n        features.push.apply(features, dorParcelFeatures);\r\n      }\r\n\r\n      // other geojson from config\r\n      const topicGeojson = this.activeTopicConfig.geojson;\r\n      if (topicGeojson) {\r\n        console.log('topicGeojson exists:', topicGeojson);\r\n        const geojsonPath = topicGeojson['path'];\r\n        let path = this.$store.state.sources;\r\n        for (let level of geojsonPath) {\r\n          if (path !== null) {\r\n            path = path[level];\r\n          }\r\n        }\r\n        if (path !== null) {\r\n          console.log('path:', path);\r\n          for (let geojson of path) {\r\n            let props = Object.assign({}, topicGeojson.style);\r\n            props.key = geojson[topicGeojson.key];\r\n            props.geojson = geojson\r\n            features.push(props);\r\n          }\r\n        }\r\n      }\r\n      return features;\r\n    },\r\n\r\n    // these geojson features will have mouseover and mouseout events,\r\n    // for highlighting horizontal table rows\r\n    reactiveGeojsonFeatures() {\r\n      const features = [];\r\n\r\n      const filteredData = this.$store.state.horizontalTables.filteredData;\r\n      // get visible tables based on active topic\r\n      const tableIds = this.$store.getters.visibleTableIds;\r\n\r\n      for (let tableId of tableIds) {\r\n        const tableConfig = this.getConfigForTable(tableId) || {};\r\n        const mapOverlay = (tableConfig.options || {}).mapOverlay;\r\n\r\n        if (!mapOverlay || mapOverlay.marker !== 'geojson') {\r\n          continue;\r\n        }\r\n\r\n        const items = filteredData[tableId];\r\n\r\n        if (items.length < 1) {\r\n          continue;\r\n        }\r\n\r\n        const style = mapOverlay.style;\r\n        items.push(tableId);\r\n\r\n        // go through rows\r\n        for (let item of items) {\r\n          let props = Object.assign({}, style);\r\n\r\n          props.geojson = item.geometry;\r\n          props.key = item.id;\r\n          props.featureId = item._featureId || null;\r\n          props.tableId = items[items.length-1];\r\n          features.push(props);\r\n        }\r\n      }\r\n      return features;\r\n    },\r\n\r\n    leafletMarkers() {\r\n      const markers = [];\r\n\r\n      markers.push.apply(markers, this.markers);\r\n      markers.push.apply(markers, this.geojsonFeatures);\r\n\r\n      return markers;\r\n    },\r\n  },\r\n  methods: {\r\n    getTableFromComps(comps, tableId) {\r\n      const matchingComps = comps.filter(comp => {\r\n        return (\r\n          comp.type === 'horizontal-table' &&\r\n          comp._id == tableId\r\n        );\r\n      }) || [];\r\n      return matchingComps[0];\r\n    },\r\n    getConfigForTable(tableId) {\r\n      const topics = this.$config.topics || [];\r\n\r\n      for (let topic of topics) {\r\n        const comps = topic.components || [];\r\n\r\n        // try outer comps\r\n        const table = this.getTableFromComps(comps, tableId);\r\n\r\n        if (table) return table;\r\n\r\n        // try inner comps\r\n        for (let comp of comps) {\r\n          const options = comp.options || {};\r\n\r\n          const innerComps = options.components || options.tables || [];\r\n\r\n          if (innerComps.length > 0) {\r\n            const innerTable = this.getTableFromComps(innerComps, tableId);\r\n            // console.log('table on 2nd try', innerTable, innerComps);\r\n\r\n            if (innerTable) return innerTable;\r\n          }\r\n        }\r\n      }\r\n    },\r\n    bringMarkerToFront(circleMarker) {\r\n      // put marker on top\r\n      const el = circleMarker._path;\r\n\r\n      // remove from parent\r\n      const group = circleMarker._renderer._rootGroup;\r\n      group.removeChild(el);\r\n\r\n      // append to end (which brings it to the front)\r\n      group.appendChild(el);\r\n    },\r\n    handleMarkerMouseover(e) {\r\n      // console.log('handleMarkerMouseover is starting');\r\n      if (!this.isMobileOrTablet) {\r\n        // console.log('handleMarkerMouseover actions are running');\r\n        const { target } = e;\r\n        const { featureId, tableId } = target.options.data;\r\n        // console.log('target:', target, 'featureId:', featureId, 'tableId:', tableId);\r\n        this.$store.commit('setActiveFeature', { featureId, tableId });\r\n      }\r\n    },\r\n    handleMarkerClick(e) {\r\n      // console.log('handleMarkerClick is starting');\r\n      if (this.isMobileOrTablet) {\r\n        // console.log('handleMarkerClick actions are running');\r\n        const { target } = e;\r\n        const { featureId, tableId } = target.options.data;\r\n        // console.log('target:', target, 'featureId:', featureId, 'tableId:', tableId);\r\n        this.$store.commit('setActiveFeature', { featureId, tableId });\r\n      }\r\n    },\r\n    handleMarkerMouseout(e) {\r\n      // console.log('handleMarkerMouseout is starting');\r\n      // if (!this.isMobileOrTablet) {\r\n        // console.log('handleMarkerMouseout actions are running');\r\n        const { target } = e;\r\n        this.$store.commit('setActiveFeature', null);\r\n      // }\r\n    },\r\n    updateMarkerFillColor(marker) {\r\n      // console.log('updateMarkerFillColor, marker:', marker);\r\n      // get next fill color\r\n      const { featureId, tableId } = marker.options.data;\r\n      const nextFillColor = this.fillColorForCircleMarker(featureId, tableId);\r\n\r\n      // highlight. we're doing this here (non-reactively) because binding the\r\n      // fill color property was not performing well enough.\r\n      const nextStyle = Object.assign({}, marker.options);\r\n      nextStyle.fillColor = nextFillColor;\r\n      marker.setStyle(nextStyle);\r\n    },\r\n  }\r\n};\r\n","<template>\r\n  <div id=\"map-panel-container\"\r\n       :class=\"this.mapPanelContainerClass\"\r\n  >\r\n    <full-screen-map-toggle-tab v-once />\r\n    <map_ :class=\"{ 'mb-map-with-widget': this.$store.state.cyclomedia.active || this.$store.state.pictometry.active }\"\r\n          id=\"map-tag\"\r\n          :center=\"this.$store.state.map.center\"\r\n          :zoom=\"this.$store.state.map.zoom\"\r\n          @l-click=\"handleMapClick\"\r\n          @l-moveend=\"handleMapMove\"\r\n          zoom-control-position=\"bottomright\"\r\n          :min-zoom=\"this.$config.map.minZoom\"\r\n          :max-zoom=\"this.$config.map.maxZoom\"\r\n    >\r\n    <!-- :class=\"{ 'mb-map-with-widget': this.$store.state.cyclomedia.active || this.$store.state.pictometry.active }\" -->\r\n      <!-- loading mask -->\r\n      <div v-show=\"isGeocoding\" class=\"mb-map-loading-mask\">\r\n        <div class=\"mb-map-loading-mask-inner\">\r\n          <i class=\"fa fa-spinner fa-4x spin\"></i>\r\n          <h1>Finding address...</h1>\r\n        </div>\r\n      </div>\r\n\r\n      <!-- basemaps -->\r\n      <esri-tiled-map-layer v-for=\"(basemap, key) in this.$config.map.basemaps\"\r\n                            v-if=\"activeBasemap === key\"\r\n                            :key=\"key\"\r\n                            :url=\"basemap.url\"\r\n                            :max-zoom=\"basemap.maxZoom\"\r\n                            :attribution=\"basemap.attribution\"\r\n      />\r\n\r\n      <!-- basemap labels and parcels outlines -->\r\n      <esri-tiled-map-layer v-for=\"(tiledLayer, key) in this.$config.map.tiledLayers\"\r\n                            v-if=\"tiledLayers.includes(key)\"\r\n                            :key=\"key\"\r\n                            :url=\"tiledLayer.url\"\r\n                            :zIndex=\"tiledLayer.zIndex\"\r\n                            :attribution=\"tiledLayer.attribution\"\r\n      />\r\n\r\n      <esri-tiled-overlay v-for=\"(tiledLayer, key) in this.$config.map.tiledOverlays\"\r\n                          v-if=\"activeTiledOverlays.includes(key)\"\r\n                          :key=\"key\"\r\n                          :url=\"tiledLayer.url\"\r\n                          :zIndex=\"tiledLayer.zIndex\"\r\n                          :opacity=\"tiledLayer.opacity\"\r\n      />\r\n\r\n      <esri-dynamic-map-layer v-for=\"(dynamicLayer, key) in this.$config.map.dynamicMapLayers\"\r\n                              v-if=\"activeDynamicMaps.includes(key)\"\r\n                              :key=\"key\"\r\n                              :url=\"dynamicLayer.url\"\r\n                              :attribution=\"dynamicLayer.attribution\"\r\n                              :transparent=\"true\"\r\n                              :opacity=\"dynamicLayer.opacity\"\r\n      />\r\n\r\n      <!-- dorParcels, pwdParcels, vacantLand, vacantBuilding -->\r\n      <esri-feature-layer v-for=\"(featureLayer, key) in this.$config.map.featureLayers\"\r\n                          v-if=\"shouldShowFeatureLayer(key, featureLayer.minZoom)\"\r\n                          :key=\"key\"\r\n                          :layerName=\"key\"\r\n                          :url=\"featureLayer.url\"\r\n                          :color=\"featureLayer.color\"\r\n                          :fillColor=\"featureLayer.color\"\r\n                          :fillOpacity=\"featureLayer.fillOpacity\"\r\n                          :weight=\"featureLayer.weight\"\r\n                          :style_=\"featureLayer.style\"\r\n                          :minZoom=\"featureLayer.minZoom\"\r\n                          :maxZoom=\"featureLayer.maxZoom\"\r\n                          :zIndex=\"featureLayer.zIndex\"\r\n                          :markerType=\"featureLayer.markerType\"\r\n                          :radius=\"featureLayer.radius\"\r\n                          :interactive=\"featureLayer.interactive\"\r\n      />\r\n\r\n      <!-- regmaps -->\r\n      <esri-dynamic-map-layer v-for=\"(item, key) in this.imageOverlayItems\"\r\n                              v-if=\"shouldShowImageOverlay(item.properties.RECMAP)\"\r\n                              :key=\"key\"\r\n                              :url=\"'//gis.phila.gov/arcgis/rest/services/Atlas/RegMaps/MapServer'\"\r\n                              :layers=\"[0]\"\r\n                              :layerDefs=\"'0:NAME=\\'g' + item.properties.RECMAP.toLowerCase() + '.tif\\''\"\r\n                              :transparent=\"true\"\r\n                              :opacity=\"0.5\"\r\n      />\r\n      <!-- :url=\"'//gis.phila.gov/arcgis/rest/services/DOR_ParcelExplorer/rtt_basemap/MapServer/'\" -->\r\n      <!-- :url=\"this.imageOverlayInfo.url\"\r\n      :opacity=\"this.imageOverlayInfo.opacity\" -->\r\n\r\n      <!-- address marker -->\r\n      <!-- REVIEW why does this need a key? it's not a list... -->\r\n      <!-- <vector-marker v-if=\"identifyFeature === 'address-marker' && geocodeGeom\"\r\n                    :latlng=\"[...geocodeGeom.coordinates].reverse()\"\r\n                    :key=\"streetAddress\"\r\n      /> -->\r\n\r\n      <!-- NEW METHOD: try rendering markers generically based on marker type -->\r\n      <!-- vector markers -->\r\n      <vector-marker v-for=\"(marker, index) in markers\"\r\n                     :latlng=\"marker.latlng\"\r\n                     :key=\"marker.key\"\r\n                     :markerColor=\"marker.color\"\r\n      />\r\n\r\n      <!-- marker using a png and ablility to rotate it -->\r\n      <png-marker v-if=\"this.cyclomediaActive\"\r\n                  :icon=\"'images/camera.png'\"\r\n                  :latlng=\"cycloLatlng\"\r\n                  :rotationAngle=\"cycloRotationAngle\"\r\n      />\r\n\r\n      <!-- marker using custom code extending icons - https://github.com/iatkin/leaflet-svgicon -->\r\n      <svg-view-cone-marker v-if=\"this.cyclomediaActive\"\r\n                            :latlng=\"cycloLatlng\"\r\n                            :rotationAngle=\"cycloRotationAngle\"\r\n                            :hFov=\"cycloHFov\"\r\n      />\r\n\r\n\r\n      <!-- non-reactive geojson features -->\r\n      <geojson v-for=\"geojsonFeature in geojsonFeatures\"\r\n               v-if=\"shouldShowGeojson(geojsonFeature.key)\"\r\n               :geojson=\"geojsonFeature.geojson\"\r\n               :fillColor=\"geojsonFeature.fillColor\"\r\n               :color=\"geojsonFeature.color\"\r\n               :weight=\"geojsonFeature.weight\"\r\n               :opacity=\"geojsonFeature.opacity\"\r\n               :fillOpacity=\"geojsonFeature.fillOpacity\"\r\n               :key=\"geojsonFeature.key\"\r\n               :data=\"{\r\n                 featureId: geojsonFeature.featureId,\r\n                 tableId: geojsonFeature.tableId\r\n               }\"\r\n       />\r\n\r\n       <!-- reactive geojson features -->\r\n       <geojson v-for=\"geojsonFeature in reactiveGeojsonFeatures\"\r\n                v-if=\"shouldShowGeojson(geojsonFeature.key)\"\r\n                @l-mouseover=\"handleMarkerMouseover\"\r\n                @l-click=\"handleMarkerClick\"\r\n                @l-mouseout=\"handleMarkerMouseout\"\r\n                :geojson=\"geojsonFeature.geojson\"\r\n                :fillColor=\"geojsonFeature.fillColor\"\r\n                :color=\"geojsonFeature.color\"\r\n                :weight=\"geojsonFeature.weight\"\r\n                :opacity=\"geojsonFeature.opacity\"\r\n                :fillOpacity=\"geojsonFeature.fillOpacity\"\r\n                :key=\"geojsonFeature.key\"\r\n                :data=\"{\r\n                  featureId: geojsonFeature.featureId,\r\n                  tableId: geojsonFeature.tableId\r\n                }\"\r\n        />\r\n\r\n       <!-- location marker -->\r\n       <circle-marker v-if=\"this.$store.state.map.location.lat != null\"\r\n                      :latlng=\"this.locationMarker.latlng\"\r\n                      :radius=\"this.locationMarker.radius\"\r\n                      :fillColor=\"this.locationMarker.fillColor\"\r\n                      :color=\"this.locationMarker.color\"\r\n                      :weight=\"this.locationMarker.weight\"\r\n                      :opacity=\"this.locationMarker.opacity\"\r\n                      :fillOpacity=\"this.locationMarker.fillOpacity\"\r\n                      :key=\"Math.random()\"\r\n       />\r\n\r\n       <!-- TODO give these a real key -->\r\n      <circle-marker v-for=\"circleMarker in circleMarkers\"\r\n                     @l-mouseover=\"handleMarkerMouseover\"\r\n                     @l-click=\"handleMarkerClick\"\r\n                     @l-mouseout=\"handleMarkerMouseout\"\r\n                     :latlng=\"circleMarker.latlng\"\r\n                     :radius=\"circleMarker.radius\"\r\n                     :fillColor=\"circleMarker.fillColor\"\r\n                   \t :color=\"circleMarker.color\"\r\n                   \t :weight=\"circleMarker.weight\"\r\n                   \t :opacity=\"circleMarker.opacity\"\r\n                   \t :fillOpacity=\"circleMarker.fillOpacity\"\r\n                     :key=\"Math.random()\"\r\n                     :data=\"{\r\n                       featureId: circleMarker.featureId,\r\n                       tableId: circleMarker.tableId\r\n                     }\"\r\n      />\r\n\r\n       <!-- <vector-marker v-for=\"marker in threeOneOneMarkers\"\r\n                      v-if=\"activeTopicConfig.key === 'threeOneOne'\"\r\n                      :latlng=\"[marker.geometry.coordinates[1], marker.geometry.coordinates[0]]\"\r\n                      :key=\"marker.id\"\r\n                      :markerColor=\"'#b2ffb2'\"\r\n       /> -->\r\n\r\n      <!-- CONTROLS: -->\r\n      <!-- basemap control -->\r\n      <control-corner :vSide=\"'top'\"\r\n                      :hSide=\"'almostright'\"\r\n      >\r\n      </control-corner>\r\n\r\n      <control-corner :vSide=\"'top'\"\r\n                      :hSide=\"'almostleft'\"\r\n      >\r\n      </control-corner>\r\n\r\n      <!-- <basemap-tooltip :position=\"'topright'\"\r\n      /> -->\r\n\r\n      <div v-once>\r\n        <basemap-toggle-control v-if=\"shouldShowImageryToggle\"\r\n                                v-once\r\n                                :position=\"'topright'\"\r\n        />\r\n      </div>\r\n\r\n      <div v-once>\r\n        <basemap-select-control :position=\"this.basemapSelectControlPosition\" />\r\n      </div>\r\n\r\n      <div v-once>\r\n        <pictometry-button v-if=\"this.shouldShowPictometryButton\"\r\n                           v-once\r\n                           :position=\"'topright'\"\r\n                           :link=\"'pictometry'\"\r\n                           :imgSrc=\"'images/pictometry.png'\"\r\n        />\r\n      </div>\r\n\r\n      <div v-once>\r\n        <cyclomedia-button v-if=\"this.shouldShowCyclomediaButton\"\r\n                           v-once\r\n                           :position=\"'topright'\"\r\n                           :link=\"'cyclomedia'\"\r\n                           :imgSrc=\"'images/cyclomedia.png'\"\r\n                           @click=\"handleCyclomediaButtonClick\"\r\n        />\r\n      </div>\r\n\r\n      <div v-once\r\n           v-if=\"this.measureControlEnabled\"\r\n      >\r\n        <measure-control :position=\"'bottomleft'\" />\r\n      </div>\r\n\r\n      <div v-once>\r\n        <legend-control v-for=\"legendControl in Object.keys(legendControls)\"\r\n                        :key=\"legendControl\"\r\n                        :position=\"'bottomleft'\"\r\n                        :options=\"legendControls[legendControl].options\"\r\n                        :items=\"legendControls[legendControl].data\"\r\n        />\r\n      </div>\r\n\r\n      <div v-once>\r\n        <location-control v-once\r\n                          v-if=\"this.geolocationEnabled\"\r\n                          :position=\"'bottomright'\"\r\n        />\r\n      </div>\r\n\r\n      <!-- <basemap-tooltip :position=\"'bottomalmostleft'\"\r\n      /> -->\r\n\r\n      <!-- <scale-control :vSide=\"'top'\"\r\n                     :hSide=\"'almostright'\"\r\n      >\r\n      </scale-control> -->\r\n\r\n      <div v-once>\r\n        <address-input :position=\"this.addressInputPosition\"\r\n                       :placeholder=\"this.addressInputPlaceholder\"\r\n        />\r\n      </div>\r\n      <address-candidate-list v-if=\"this.addressAutocompleteEnabled\"\r\n                              :position=\"this.addressInputPosition\"\r\n      />\r\n\r\n\r\n      <cyclomedia-recording-circle v-for=\"recording in cyclomediaRecordings\"\r\n                                   v-if=\"cyclomediaActive\"\r\n                                   :key=\"recording.imageId\"\r\n                                   :imageId=\"recording.imageId\"\r\n                                   :latlng=\"[recording.lat, recording.lng]\"\r\n                                   :size=\"1.2\"\r\n                                   :color=\"'#3388ff'\"\r\n                                   :weight=\"1\"\r\n                                   @l-click=\"handleCyclomediaRecordingClick\"\r\n      />\r\n    </map_>\r\n    <slot class='widget-slot' name=\"cycloWidget\" />\r\n    <slot class='widget-slot' name=\"pictWidget\" />\r\n  </div>\r\n</template>\r\n\r\n<script>\r\n  import * as L from 'leaflet';\r\n  import philaVueMapping from '@cityofphiladelphia/phila-vue-mapping';\r\n\r\n  // mixins\r\n  import markersMixin from './markers-mixin';\r\n  const cyclomediaMixin = philaVueMapping.CyclomediaMixin;\r\n  const pictometryMixin = philaVueMapping.PictometryMixin;\r\n\r\n  // vue doesn't like it when you import this as Map (reserved-ish word)\r\n  const Map_ = philaVueMapping.Map_;\r\n  const Control = philaVueMapping.Control;\r\n  const AddressInput = philaVueMapping.AddressInput;\r\n  const AddressCandidateList = philaVueMapping.AddressCandidateList;\r\n  const EsriTiledMapLayer = philaVueMapping.EsriTiledMapLayer;\r\n  const EsriTiledOverlay = philaVueMapping.EsriTiledOverlay;\r\n  const EsriDynamicMapLayer = philaVueMapping.EsriDynamicMapLayer;\r\n  const EsriFeatureLayer = philaVueMapping.EsriFeatureLayer;\r\n  const Geojson = philaVueMapping.Geojson;\r\n  const CircleMarker = philaVueMapping.CircleMarker;\r\n  // const OpacitySlider = philaVueMapping.OpacitySlider;\r\n  const VectorMarker = philaVueMapping.VectorMarker;\r\n  const PngMarker = philaVueMapping.PngMarker;\r\n  const BasemapToggleControl = philaVueMapping.BasemapToggleControl;\r\n  const BasemapSelectControl = philaVueMapping.BasemapSelectControl;\r\n  const FullScreenMapToggleTab = philaVueMapping.FullScreenMapToggleTab;\r\n  const LocationControl = philaVueMapping.LocationControl;\r\n  const CyclomediaButton = philaVueMapping.CyclomediaButton;\r\n  const PictometryButton = philaVueMapping.PictometryButton;\r\n  const CyclomediaRecordingCircle = philaVueMapping.CyclomediaRecordingCircle;\r\n  const CyclomediaRecordingsClient = philaVueMapping.CyclomediaRecordingsClient;\r\n  const SvgViewConeMarker = philaVueMapping.SvgViewConeMarker;\r\n  const MeasureControl = philaVueMapping.MeasureControl;\r\n  const LegendControl = philaVueMapping.LegendControl;\r\n  const BasemapTooltip = philaVueMapping.BasemapTooltip;\r\n  const ControlCorner = philaVueMapping.ControlCorner;\r\n\r\n  export default {\r\n    mixins: [\r\n      markersMixin,\r\n      cyclomediaMixin,\r\n      pictometryMixin,\r\n    ],\r\n    components: {\r\n      Map_,\r\n      Control,\r\n      AddressInput,\r\n      AddressCandidateList,\r\n      EsriTiledMapLayer,\r\n      EsriTiledOverlay,\r\n      EsriDynamicMapLayer,\r\n      EsriFeatureLayer,\r\n      Geojson,\r\n      CircleMarker,\r\n      // OpacitySlider,\r\n      VectorMarker,\r\n      PngMarker,\r\n      BasemapToggleControl,\r\n      BasemapSelectControl,\r\n      FullScreenMapToggleTab,\r\n      LocationControl,\r\n      PictometryButton,\r\n      CyclomediaButton,\r\n      CyclomediaRecordingCircle,\r\n      SvgViewConeMarker,\r\n      MeasureControl,\r\n      LegendControl,\r\n      BasemapTooltip,\r\n      ControlCorner,\r\n    },\r\n    created() {\r\n      // if there's a default address, navigate to it\r\n      const defaultAddress = this.$config.defaultAddress;\r\n      if (defaultAddress) {\r\n        this.$controller.goToDefaultAddress(defaultAddress);\r\n      }\r\n\r\n      const cyclomediaConfig = this.$config.cyclomedia || {};\r\n      if (cyclomediaConfig.enabled) {\r\n      // create cyclomedia recordings client\r\n        this.$cyclomediaRecordingsClient = new CyclomediaRecordingsClient(\r\n          this.$config.cyclomedia.recordingsUrl,\r\n          this.$config.cyclomedia.username,\r\n          this.$config.cyclomedia.password,\r\n          4326\r\n        );\r\n      }\r\n    },\r\n    computed: {\r\n      // shouldShowAddressInput() {\r\n      //   if (this.$config.addressInputLocation == 'map') {\r\n      //     return true;\r\n      //   } else {\r\n      //     return false;\r\n      //   }\r\n      // },\r\n      addressAutocompleteEnabled() {\r\n        // TODO tidy up the code\r\n        if (this.$config.addressInput) {\r\n          if (this.$config.addressInput.autocompleteEnabled === true) {\r\n            return true;\r\n          } else {\r\n            return false;\r\n          }\r\n        } else {\r\n          return false;\r\n        }\r\n      },\r\n      addressInputPosition() {\r\n        if (this.isMobileOrTablet) {\r\n          return 'topleft'\r\n        } else {\r\n          return 'topalmostleft'\r\n        }\r\n      },\r\n      addressInputPlaceholder() {\r\n        if (this.$config.addressInput) {\r\n          return this.$config.addressInput.placeholder;\r\n        } else {\r\n          return null\r\n        }\r\n      },\r\n      basemapSelectControlPosition() {\r\n        if (this.isMobileOrTablet) {\r\n          return 'topright'\r\n        } else {\r\n          return 'topalmostright'\r\n        }\r\n      },\r\n      shouldShowAddressCandidateList() {\r\n        return this.$store.state.shouldShowAddressCandidateList;\r\n      },\r\n      measureControlEnabled() {\r\n        if (this.$config.measureControlEnabled === false) {\r\n          return false;\r\n        } else {\r\n          return true;\r\n        }\r\n      },\r\n      fullScreenMapEnabled() {\r\n        return this.$store.state.fullScreenMapEnabled;\r\n      },\r\n      fullScreenTopicsEnabled() {\r\n        return this.$store.state.fullScreenTopicsEnabled;\r\n      },\r\n      mapPanelContainerClass() {\r\n        // return 'medium-12 small-order-1 small-24 medium-order-2 mb-panel mb-panel-map'\r\n        if (this.fullScreenMapEnabled) {\r\n          return 'medium-24 small-order-1 small-24 medium-order-2 mb-panel mb-panel-map'\r\n        } else if (this.fullScreenMapOnly) {\r\n          return 'medium-1 small-order-1 small-1 medium-order-2 mb-panel mb-panel-map'\r\n        } else if (this.fullScreenTopicsEnabled) {\r\n          return 'medium-1 small-order-1 small-24 medium-order-2 mb-panel mb-panel-map'\r\n        } else {\r\n          return 'medium-12 small-order-1 small-24 medium-order-2 mb-panel mb-panel-map'\r\n        }\r\n      },\r\n      cycloLatlng() {\r\n        if (this.$store.state.cyclomedia.orientation.xyz !== null) {\r\n          const xyz = this.$store.state.cyclomedia.orientation.xyz;\r\n          return [xyz[1], xyz[0]];\r\n        } else {\r\n          const center = this.$config.map.center;\r\n          return center;\r\n        }\r\n      },\r\n      cycloRotationAngle() {\r\n        return this.$store.state.cyclomedia.orientation.yaw * (180/3.14159265359);\r\n      },\r\n      cycloHFov() {\r\n        return this.$store.state.cyclomedia.orientation.hFov;\r\n      },\r\n      isMobileOrTablet() {\r\n        return this.$store.state.isMobileOrTablet;\r\n      },\r\n      shouldShowCyclomediaButton() {\r\n        return this.$config.cyclomedia.enabled && !this.isMobileOrTablet;\r\n      },\r\n      shouldShowPictometryButton() {\r\n        return this.$config.pictometry.enabled && !this.isMobileOrTablet;\r\n      },\r\n      geolocationEnabled() {\r\n        if (this.$config.geolocation) {\r\n          return this.$config.geolocation.enabled;\r\n        } else {\r\n          return false;\r\n        }\r\n      },\r\n      activeDorParcel() {\r\n        // return this.$store.state.activeDorParcel;\r\n        return this.$store.state.parcels.dor.activeParcel;\r\n      },\r\n      legendControls() {\r\n        return this.$config.legendControls || {};\r\n      },\r\n      imageOverlay() {\r\n        return this.$store.state.map.imageOverlay;\r\n      },\r\n      imageOverlayItems() {\r\n        // console.log('calculating imageOverlayItem');\r\n        if (this.activeTopicConfig.imageOverlayGroup) {\r\n          const overlayGroup = this.activeTopicConfig.imageOverlayGroup;\r\n          const state = this.$store.state;\r\n          const overlay = this.$config.imageOverlayGroups[overlayGroup].items(state);\r\n          // console.log('returning imageOverlayItem', overlay);\r\n          return overlay;\r\n        } else {\r\n          return [];\r\n        }\r\n      },\r\n      imageOverlayInfo() {\r\n        // console.log('config:', this.$config);\r\n        return this.$config.map.dynamicMapLayers.regmaps;\r\n      },\r\n      activeBasemap() {\r\n        const shouldShowImagery = this.$store.state.map.shouldShowImagery;\r\n        if (shouldShowImagery) {\r\n          return this.$store.state.map.imagery;\r\n        }\r\n        const defaultBasemap = this.$config.map.defaultBasemap;\r\n        const basemap = this.$store.state.map.basemap || defaultBasemap;\r\n        return basemap;\r\n      },\r\n      tiledLayers() {\r\n        const activeBasemap = this.activeBasemap;\r\n        const activeBasemapConfig = this.configForBasemap(activeBasemap)\r\n\r\n        return activeBasemapConfig.tiledLayers || [];\r\n      },\r\n      activeTiledOverlays() {\r\n        if (!this.activeTopicConfig || !this.activeTopicConfig.tiledOverlays) {\r\n          return [];\r\n        } else {\r\n          return this.activeTopicConfig.tiledOverlays;\r\n        }\r\n      },\r\n      activeDynamicMaps() {\r\n        if (!this.activeTopicConfig || !this.activeTopicConfig.dynamicMapLayers) {\r\n          return [];\r\n        } else {\r\n          return this.activeTopicConfig.dynamicMapLayers;\r\n        }\r\n      },\r\n      activeFeatureLayers() {\r\n        if (!this.activeTopicConfig || !this.activeTopicConfig.featureLayers) {\r\n          return [];\r\n        } else {\r\n          return this.activeTopicConfig.featureLayers;\r\n        }\r\n      },\r\n      activeFeature() {\r\n        return this.$store.state.activeFeature;\r\n      },\r\n      basemaps() {\r\n        return Object.values(this.$config.map.basemaps);\r\n      },\r\n      imageryBasemaps() {\r\n        return this.basemaps.filter(basemap => basemap.type === 'imagery');\r\n      },\r\n      hasImageryBasemaps() {\r\n        return this.imageryBasemaps.length > 0;\r\n      },\r\n      shouldShowImageryToggle() {\r\n        if (this.$config.map.imagery) {\r\n          return this.hasImageryBasemaps && this.$config.map.imagery.enabled;\r\n        } else {\r\n          return this.hasImageryBasemaps;\r\n        }\r\n      },\r\n      identifyFeature() {\r\n        let configFeature;\r\n        if (this.geocodeType === 'intersection') {\r\n          configFeature = \"address-marker\";\r\n        } else if (this.activeTopicConfig.identifyFeature) {\r\n          configFeature = this.activeTopicConfig.identifyFeature;\r\n        } else {\r\n          if (this.$config) {\r\n            configFeature = this.$config.map.defaultIdentifyFeature;\r\n          }\r\n        }\r\n        return configFeature;\r\n      },\r\n      activeTopic() {\r\n        return this.$store.state.activeTopic;\r\n      },\r\n      activeTopicConfig() {\r\n        const key = this.activeTopic;\r\n        let config;\r\n\r\n        // if no active topic, return null\r\n        if (key) {\r\n          config = this.$config.topics.filter((topic) => {\r\n            return topic.key === key;\r\n          })[0];\r\n        }\r\n\r\n        return config || {};\r\n      },\r\n      activeParcelLayer() {\r\n        return this.activeTopicConfig.parcels;\r\n      },\r\n      dorParcels() {\r\n        return this.$store.state.parcels.dor.data;\r\n      },\r\n      pwdParcel() {\r\n        return this.$store.state.parcels.pwd;\r\n      },\r\n      geocodeResult() {\r\n        return this.$store.state.geocode.data || {};\r\n      },\r\n      geocodeGeom() {\r\n        return this.geocodeResult.geometry;\r\n      },\r\n      geocodeType() {\r\n        return this.geocodeResult.ais_feature_type;\r\n      },\r\n      streetAddress() {\r\n        return this.geocodeResult.properties.street_address;\r\n      },\r\n      picOrCycloActive() {\r\n        if (this.cyclomediaActive || this.pictometryActive) {\r\n          return true;\r\n        } else {\r\n          return false;\r\n        }\r\n      },\r\n      mapBounds() {\r\n        // TODO calculate map bounds based on leaflet markers above\r\n      },\r\n      boundsBasedOnShape() {\r\n        return this.$store.state.map.boundsBasedOnShape;\r\n      },\r\n      isGeocoding() {\r\n        return this.$store.state.geocode.status === 'waiting';\r\n      }\r\n    },\r\n    watch: {\r\n      picOrCycloActive(value) {\r\n        this.$nextTick(() => {\r\n          this.$store.state.map.map.invalidateSize();\r\n        })\r\n      },\r\n      geojsonFeatures() {\r\n        this.setMapToBounds();\r\n      },\r\n      markers() {\r\n        this.setMapToBounds();\r\n      },\r\n      fullScreenTopicsEnabled() {\r\n        this.$nextTick(() => {\r\n          this.$store.state.map.map.invalidateSize();\r\n        })\r\n      }\r\n    },\r\n    methods: {\r\n      setMapToBounds() {\r\n        // console.log('setMapToBounds is running');\r\n        let featureArray = []\r\n        if (this.activeTopicConfig.zoomToShape) {\r\n          if (this.activeTopicConfig.zoomToShape.includes('geojson')) {\r\n            for (let geojsonFeature of this.geojsonFeatures) {\r\n              featureArray.push(L.geoJSON(geojsonFeature.geojson))\r\n            }\r\n          }\r\n          if (this.activeTopicConfig.zoomToShape.includes('marker')) {\r\n            for (let marker of this.markers) {\r\n              if (marker.markerType === 'overlay') {\r\n                featureArray.push(L.marker(marker.latlng))\r\n              }\r\n            }\r\n          }\r\n          const group = new L.featureGroup(featureArray);\r\n          const bounds = group.getBounds();\r\n          this.$store.commit('setMapBounds', bounds);\r\n        }\r\n      },\r\n      configForBasemap(basemap) {\r\n        return this.$config.map.basemaps[basemap] || {};\r\n      },\r\n      shouldShowGeojson(key) {\r\n        if (this.activeTopicConfig.basemap === 'pwd') {\r\n          return true;\r\n        } else {\r\n          return key === this.activeDorParcel;\r\n        }\r\n      },\r\n      shouldShowImageOverlay(key) {\r\n        return key === this.imageOverlay;\r\n      },\r\n      shouldShowFeatureLayer(key) {\r\n        if (this.activeFeatureLayers.includes(key)) {\r\n          return true;\r\n        }\r\n        return false;\r\n      },\r\n      handleMapClick(e) {\r\n        // console.log('MapPanel.vue handleMapClick e:', e);\r\n        // latLng = L.latLng(e.lat, e.lng)\r\n        this.$controller.handleMapClick(e);\r\n      },\r\n\r\n      handleMapMove(e) {\r\n        const map = this.$store.state.map.map;\r\n\r\n        const pictometryConfig = this.$config.pictometry || {};\r\n\r\n        const center = map.getCenter();\r\n        const { lat, lng } = center;\r\n        const coords = [lng, lat];\r\n\r\n        if (pictometryConfig.enabled) {\r\n          // update state for pictometry\r\n          this.$store.commit('setPictometryMapCenter', coords);\r\n\r\n          const zoom = map.getZoom();\r\n          this.$store.commit('setPictometryMapZoom', zoom);\r\n        }\r\n\r\n        const cyclomediaConfig = this.$config.cyclomedia || {};\r\n\r\n        if (cyclomediaConfig.enabled) {\r\n          // update cyclo recordings\r\n          this.updateCyclomediaRecordings();\r\n          this.$store.commit('setCyclomediaLatLngFromMap', [lat, lng]);\r\n        }\r\n      },\r\n      fillColorForCircleMarker(markerId, tableId) {\r\n        // get map overlay style and hover style for table\r\n        const tableConfig = this.getConfigForTable(tableId);\r\n        const mapOverlay = tableConfig.options.mapOverlay;\r\n        const { style, hoverStyle } = mapOverlay;\r\n\r\n        // compare id to active feature id\r\n        const activeFeature = this.activeFeature;\r\n        const useHoverStyle = (\r\n          markerId === activeFeature.featureId &&\r\n          tableId === activeFeature.tableId\r\n        );\r\n        const curStyle = useHoverStyle ? hoverStyle : style;\r\n\r\n        return curStyle.fillColor;\r\n      },\r\n    }, // end of methods\r\n  }; //end of export\r\n</script>\r\n\r\n<style scoped>\r\n  .mb-panel-map {\r\n    /*this allows the loading mask to fill the div*/\r\n    position: relative;\r\n  }\r\n\r\n  .mb-map-with-widget {\r\n    height: 50%;\r\n  }\r\n\r\n  .widget-slot {\r\n    display: inline-block;\r\n    float: left;\r\n  }\r\n\r\n  .mb-map-loading-mask {\r\n    /*display: inline;*/\r\n    position: absolute;\r\n    top: 0;\r\n    height: 100%;\r\n    width: 100%;\r\n    background: rgba(0, 0 ,0 , 0.25);\r\n    z-index: 1000;\r\n    text-align: center;\r\n    vertical-align: middle;\r\n  }\r\n\r\n  .mb-map-loading-mask-inner {\r\n    position: absolute;\r\n    top: 40%;\r\n    left: 40%;\r\n  }\r\n\r\n  /*small retina*/\r\n  /*@media\r\n  (-webkit-min-device-pixel-ratio: 2),\r\n  (min-resolution: 192dpi),\r\n  (max-width: 39.9375em) {\r\n    .mb-search-control-input {\r\n      max-width: 250px;\r\n    }\r\n  }*/\r\n\r\n</style>\r\n","<template>\r\n  <div id=\"mb-root\"\r\n       :class=\"rootClass\"\r\n       :style=\"mbRootStyle\"\r\n  >\r\n      <topic-panel :class=\"this.shouldShowTopicPanel\" />\r\n\r\n      <map-panel :class=\"this.shouldShowMapPanel\"\r\n                 v-if=\"this.fullScreenTopicsOnly !== true\"\r\n      >\r\n        <cyclomedia-widget v-if=\"this.shouldLoadCyclomediaWidget\"\r\n                           slot=\"cycloWidget\"\r\n                           v-show=\"cyclomediaActive\"\r\n                           screen-percent=\"2\"\r\n        />\r\n        <pictometry-widget v-if=\"this.shouldLoadPictometryWidget\"\r\n                           slot=\"pictWidget\"\r\n                           v-show=\"pictometryActive\"\r\n                           :apiKey=\"this.ak\"\r\n                           :secretKey=\"this.sk\"\r\n        >\r\n          <png-marker v-if=\"this.pictometryShowAddressMarker\"\r\n                      :latlng=\"[this.geocodeData.geometry.coordinates[1], this.geocodeData.geometry.coordinates[0]]\"\r\n                      :icon=\"'images/markers.png'\"\r\n                      :height=\"60\"\r\n                      :width=\"40\"\r\n                      :offsetX=\"0\"\r\n                      :offsetY=\"0\"\r\n          />\r\n          <layer v-if=\"this.pictometryActive\" />\r\n          <png-marker v-if=\"this.cyclomediaActive && this.pictometryActive\"\r\n                      :latlng=\"cycloLatlng\"\r\n                      :icon=\"'images/camera2.png'\"\r\n                      :height=\"20\"\r\n                      :width=\"30\"\r\n                      :offsetX=\"-2\"\r\n                      :offsetY=\"-2\"\r\n          />\r\n          <view-cone v-if=\"this.cyclomediaActive && this.pictometryActive\"\r\n                     :latlng=\"cycloLatlng\"\r\n                     :rotationAngle=\"cycloRotationAngle\"\r\n                     :hFov=\"cycloHFov\"\r\n          />\r\n        </pictometry-widget>\r\n      </map-panel>\r\n      <popover :html=\"popover\"\r\n  \t\t\t\t\t\t v-if=\"popover.length > 0\"\r\n  \t\t/>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\n  import philaVueMapping from '@cityofphiladelphia/phila-vue-mapping';\r\n  import philaVueComps from '@cityofphiladelphia/phila-vue-comps';\r\n\r\n  import TopicPanel from './TopicPanel.vue';\r\n  import MapPanel from './MapPanel.vue';\r\n\r\n  const CyclomediaWidget = philaVueMapping.CyclomediaWidget;\r\n  const PictometryWidget = philaVueMapping.PictometryWidget;\r\n  const Layer = philaVueMapping.PictometryLayer;\r\n  const ViewCone = philaVueMapping.PictometryViewCone;\r\n  const PngMarker = philaVueMapping.PictometryPngMarker;\r\n  const Popover = philaVueComps.Popover;\r\n\r\n\r\n  export default {\r\n    components: {\r\n      TopicPanel,\r\n      MapPanel,\r\n      CyclomediaWidget,\r\n      PictometryWidget,\r\n      Layer,\r\n      PngMarker,\r\n      ViewCone,\r\n      Popover,\r\n    },\r\n    data() {\r\n      const data = {\r\n        // this will only affect the app size if the app is set to \"plugin\" mode\r\n        mbRootStyle: {\r\n          'height': '100px'\r\n        }\r\n      };\r\n      return data;\r\n    },\r\n    created() {\r\n      console.log('this.$config:', this.$config);\r\n      if (this.$config.panels) {\r\n        if (!this.$config.panels.includes('map')) {\r\n          this.$store.commit('setTopicsOnly', true);\r\n        } else if (!this.$config.panels.includes('topics')) {\r\n          this.$store.commit('setMapOnly', true);\r\n        }\r\n      }\r\n      window.addEventListener('click', this.closeAddressCandidateList);\r\n      window.addEventListener('resize', this.handleWindowResize);\r\n      this.handleWindowResize();\r\n    },\r\n    mounted() {\r\n      this.$controller.appDidLoad();\r\n    },\r\n    computed: {\r\n      rootClass() {\r\n        if (this.$config.plugin) {\r\n          return 'grid-x';\r\n        } else {\r\n          return 'cell medium-auto grid-x';\r\n        }\r\n      },\r\n      isMobileOrTablet() {\r\n        return this.$store.state.isMobileOrTablet;\r\n      },\r\n      shouldLoadCyclomediaWidget() {\r\n        return this.$config.cyclomedia.enabled && !this.isMobileOrTablet;\r\n      },\r\n      shouldLoadPictometryWidget() {\r\n        return this.$config.pictometry.enabled && !this.isMobileOrTablet;\r\n      },\r\n      fullScreenMapOnly() {\r\n        return this.$store.state.fullScreen.mapOnly;\r\n      },\r\n      fullScreenMapEnabled() {\r\n        return this.$store.state.fullScreenMapEnabled;\r\n      },\r\n      fullScreenTopicsOnly() {\r\n        return this.$store.state.fullScreen.topicsOnly;\r\n      },\r\n      fullScreenTopicsEnabled() {\r\n        return this.$store.state.fullScreenTopicsEnabled;\r\n      },\r\n      shouldShowTopicPanel() {\r\n        let value;\r\n        if (!this.fullScreenMapEnabled && !this.fullScreenMapOnly) {\r\n          value = 'topic-panel-true';\r\n        } else {\r\n          value = 'topic-panel-false';\r\n        }\r\n        return value;\r\n      },\r\n      shouldShowMapPanel() {\r\n        let value;\r\n        if (!this.fullScreenTopicsEnabled && !this.fullScreenTopicsOnly) {\r\n          value = 'map-panel-true';\r\n        } else {\r\n          value = 'map-panel-false';\r\n        }\r\n        return value;\r\n      },\r\n      cyclomediaActive() {\r\n        return this.$store.state.cyclomedia.active\r\n      },\r\n      cycloLatlng() {\r\n        if (this.$store.state.cyclomedia.orientation.xyz !== null) {\r\n          const xyz = this.$store.state.cyclomedia.orientation.xyz;\r\n          return [xyz[1], xyz[0]];\r\n        } else {\r\n          const center = this.$config.map.center;\r\n          return center;\r\n        }\r\n      },\r\n      cycloRotationAngle() {\r\n        return this.$store.state.cyclomedia.orientation.yaw * (180/3.14159265359);\r\n      },\r\n      cycloHFov() {\r\n        return this.$store.state.cyclomedia.orientation.hFov;\r\n      },\r\n      pictometryActive() {\r\n        return this.$store.state.pictometry.active\r\n      },\r\n      pictometryZoom() {\r\n        return this.$store.state.pictometry.zoom\r\n      },\r\n      pictometryShowAddressMarker() {\r\n        if (!this.pictometryActive || !this.geocodeData) {\r\n          return false;\r\n        } else if (this.pictometryZoom < 20 && this.cyclomediaActive) {\r\n          return false;\r\n        } else {\r\n          return true;\r\n        }\r\n      },\r\n      geocodeData() {\r\n        return this.$store.state.geocode.data\r\n      },\r\n      ak() {\r\n        const host = window.location.hostname;\r\n        if (host === 'atlas.phila.gov') {\r\n          return this.$config.pictometry.apiKey;\r\n        }\r\n        if (host === 'atlas-dev.phila.gov') {\r\n          return this.$config.pictometryDev.apiKey;\r\n        }\r\n        if (host === 'cityatlas.phila.gov') {\r\n          return this.$config.pictometryCity.apiKey;\r\n        }\r\n        if (host === 'cityatlas-dev.phila.gov') {\r\n          return this.$config.pictometryCityDev.apiKey;\r\n        }\r\n        if (host === '10.8.101.67') {\r\n          return this.$config.pictometryLocal.apiKey;\r\n        }\r\n      },\r\n      sk() {\r\n        const host = window.location.hostname;\r\n        if (host === 'atlas.phila.gov') {\r\n          return this.$config.pictometry.secretKey;\r\n        }\r\n        if (host === 'atlas-dev.phila.gov') {\r\n          return this.$config.pictometryDev.secretKey;\r\n        }\r\n        if (host === 'cityatlas.phila.gov') {\r\n          return this.$config.pictometryCity.secretKey;\r\n        }\r\n        if (host === 'cityatlas-dev.phila.gov') {\r\n          return this.$config.pictometryCityDev.secretKey;\r\n        }\r\n        if (host === '10.8.101.67') {\r\n          return this.$config.pictometryLocal.secretKey;\r\n        }\r\n      },\r\n      popover() {\r\n        return this.$store.state.popover;\r\n      },\r\n    },\r\n    watch: {\r\n      pictometryShowAddressMarker(nextValue) {\r\n        console.log('watch pictometryShowAddressMarker', nextValue);\r\n      }\r\n    },\r\n    methods: {\r\n      closeAddressCandidateList() {\r\n        this.$store.commit('setShouldShowAddressCandidateList', false);\r\n      },\r\n      handleWindowResize() {\r\n        // this only actually affects the size if it is set to \"plugin mode\"\r\n        if ($(window).width() >= 750) {\r\n          this.mbRootStyle.height = '600px'\r\n        } else {\r\n          this.mbRootStyle.height = 'auto';\r\n        }\r\n      }\r\n    },\r\n  };\r\n</script>\r\n\r\n<style>\r\n  /*don't highlight any form elements*/\r\n  input:focus,\r\n  select:focus,\r\n  textarea:focus,\r\n  button:focus {\r\n    outline: none;\r\n  }\r\n\r\n  .mb-panel-topics-with-widget {\r\n    height: 50%;\r\n  }\r\n\r\n  /* standards applies padding to buttons, which causes some weirdness with\r\n  buttons on the map panel. override here. */\r\n  button {\r\n    padding: inherit;\r\n  }\r\n\r\n  .topic-panel-false {\r\n    /* display: none; */\r\n  }\r\n\r\n  @media screen and (min-width: 46.875em) {\r\n    .topic-panel-false {\r\n      display: none;\r\n    }\r\n\r\n    .map-panel-false {\r\n      display: none;\r\n    }\r\n  }\r\n\r\n</style>\r\n","// http://stackoverflow.com/a/37164538/676001\r\n\r\n// helper to verify that an item is an object\r\nexport function isObject(item) {\r\n  return (item && typeof item === 'object' && !Array.isArray(item) && item !== null);\r\n};\r\n\r\n// merges n objects, deeply, immutably\r\nexport default function mergeDeep(target, source) {\r\n  let output = Object.assign({}, target);\r\n  if (isObject(target) && isObject(source)) {\r\n    Object.keys(source).forEach(key => {\r\n      if (isObject(source[key])) {\r\n        if (!(key in target))\r\n          Object.assign(output, { [key]: source[key] });\r\n        else\r\n          output[key] = mergeDeep(target[key], source[key]);\r\n      } else {\r\n        Object.assign(output, { [key]: source[key] });\r\n      }\r\n    });\r\n  }\r\n  return output;\r\n};\r\n","function generateUniqueId() {\r\n  return Math.random().toString(36).substring(7);\r\n}\r\n\r\nexport default generateUniqueId;\r\n","import Vue from 'vue';\r\nimport axios from 'axios';\r\nimport createStore from './store';\r\nimport configMixin from './util/config-mixin';\r\nimport Mapboard from './components/Mapboard.vue';\r\nimport mergeDeep from './util/merge-deep';\r\nimport generateUniqueId from './util/unique-id';\r\n\r\nimport philaVueDatafetch from '@cityofphiladelphia/phila-vue-datafetch';\r\nconst controllerMixin = philaVueDatafetch;\r\n\r\n// helper function to auto-assign ids to horizontal tables\r\nfunction assignTableIds(comps) {\r\n  for (let comp of comps) {\r\n    const options = comp.options || {};\r\n    const innerComps = options.components || options.tables;\r\n\r\n    // if this is a \"group\" component, recurse\r\n    if (innerComps) {\r\n      assignTableIds(innerComps);\r\n      // return;\r\n    }\r\n\r\n    // skip comps that aren't horizontal tables\r\n    if (comp.type !== 'horizontal-table') {\r\n      continue;\r\n    }\r\n\r\n     const id = generateUniqueId();\r\n     comp._id = id;\r\n     // the id also needs to get passed to the horizontal table component, so\r\n     // use the options object.\r\n     comp.options.tableId = id;\r\n  }\r\n}\r\n\r\nfunction assignHorizontalTableGroupIds(comps) {\r\n  for (let comp of comps) {\r\n    const options = comp.options || {};\r\n    const innerComps = options.tables;\r\n\r\n    // if this is a \"group\" component, recurse\r\n    if (!innerComps) {\r\n      continue;\r\n    }\r\n\r\n    // skip comps that aren't horizontal table groups\r\n    if (comp.type !== 'horizontal-table-group') {\r\n      continue;\r\n    }\r\n\r\n     const id = generateUniqueId();\r\n     comp._id = id;\r\n     // the id also needs to get passed to the horizontal table component, so\r\n     // use the options object.\r\n     comp.options.horizontalTableGroupId = id;\r\n  }\r\n}\r\n\r\nfunction initMapboard(clientConfig) {\r\n  const baseConfigUrl = clientConfig.baseConfig;\r\n  // console.log('baseConfigUrl:', baseConfigUrl);\r\n\r\n  // get base config\r\n  return axios.get(baseConfigUrl).then(response => {\r\n    const data = response.data;\r\n    // const data = baseConfigUrl;\r\n\r\n    // parse raw js. yes, it's ok to use eval :)\r\n    // http://stackoverflow.com/a/87260/676001\r\n    const baseConfigFn = eval(data);\r\n    const { gatekeeperKey } = clientConfig;\r\n    const baseConfig = baseConfigFn({ gatekeeperKey });\r\n\r\n    // deep merge base config and client config\r\n    const config = mergeDeep(baseConfig, clientConfig);\r\n    // const config = mergeDeep(baseConfigUrl, clientConfig);\r\n\r\n    // assign table ids\r\n    for (let topic of config.topics) {\r\n      assignTableIds(topic.components);\r\n      assignHorizontalTableGroupIds(topic.components);\r\n    }\r\n\r\n    // make config accessible from each component via this.$config\r\n    Vue.use(configMixin, config);\r\n\r\n    // create store\r\n    const store = createStore(config);\r\n\r\n    // mix in controller\r\n    Vue.use(controllerMixin, { config, store });\r\n    // Vue.use(controllerMixin, { config, store, eventBus });\r\n\r\n    // mount main vue\r\n    const vm = new Vue({\r\n      el: config.el || '#mapboard',\r\n      render: h => h(Mapboard),\r\n      store\r\n    });\r\n\r\n  }).catch(err => {\r\n    console.error('Error loading base config:', err);\r\n  });\r\n}\r\n\r\nexport default initMapboard;\r\n\r\n// also expose the vue component as a named export\r\nexport { Mapboard };\r\n"],"names":["const","userAgent","navigator","vendor","window","opera","test","substr","getHorizontalTableIdsFromComps","comps","let","tableIds","comp","options","innerComps","components","tables","innerTableIds","concat","type","tableId","_id","push","createFilteredData","config","topics","compTableIds","filteredData","index","length","getHorizontalTableGroupIdsFromComps","tableGroupId","createHorizontalTableGroups","tableGroupIds","compTableGroupId","horizontalTableGroups","activeTable","activeTableId","createStore","sources","Object","keys","dataSources","reduce","o","key","val","targets","status","secondaryStatus","data","parcels","multipleAllowed","activeParcel","activeAddress","activeMapreg","initialState","isMobileOrTablet","isMobileDevice","fullScreen","mapOnly","topicsOnly","fullScreenMapEnabled","fullScreenTopicsEnabled","popover","activeTopic","activeParcelLayer","clickCoords","geocode","input","related","lastSearchMethod","map","location","lat","lng","center","bounds","northEast","southWest","zoom","boundsBasedOnShape","basemap","imagery","shouldShowImagery","imageOverlay","imageOverlayOpacity","filters","watchPositionOn","shouldShowAddressCandidateList","candidates","addressEntered","cyclomedia","initialized","navBarOpen","latLngFromMap","orientation","yaw","hFov","xyz","active","recordings","pictometry","ipa","shapeIds","pngMarkerIds","horizontalTables","activeFeature","featureId","appData","propertyBalance","Vuex","Store","state","getters","visibleTableIds","filter","topic","compTableGroup","array","mutations","setCyclomediaInitialized","payload","setIsMobileOrTablet","setMapOnly","setTopicsOnly","setFullScreenMapEnabled","setFullScreenTopicsEnabled","setLocation","setWatchPositionOn","setClickCoords","setHorizontalTableGroupActiveTable","setHorizontalTableFilteredData","setActiveTopic","setActiveParcelLayer","setSourceStatus","targetId","setSecondarySourceStatus","setSourceData","setSourceDataMore","nextPage","page","allData","features","setMapFilters","createEmptySourceTargets","targetIds","acc","clearSourceTargets","setMap","setMapCenter","setMapZoom","setMapBounds","setMapBoundsBasedOnShape","setParcelData","parcelLayer","setActiveParcel","setGeocodeStatus","setGeocodeData","setGeocodeRelated","setGeocodeInput","setBasemap","setImagery","setShouldShowImagery","setPictometryActive","enabled","setCyclomediaActive","setCyclomediaYaw","setCyclomediaHFov","setCyclomediaXyz","setCyclomediaRecordings","setCyclomediaLatLngFromMap","setCyclomediaNavBarOpen","setActiveFeature","nextActiveFeature","setLastSearchMethod","setPictometryIpa","setPictometryShapeIds","setPictometryPngMarkerIds","setPictometryMapCenter","setPictometryMapZoom","setPictometryZoom","setImageOverlay","setImageOverlayOpacity","setShouldShowAddressCandidateList","setCandidates","setAddressEntered","setPropertyBalance","setPopover","Vue","mixin","created","this","$config","use","Topic","philaVueComps","TopicComponentGroup","Greeting","AddressInput","AddressCandidateList","FullScreenTopicsToggleTab","render","topicsContainerStyle","overflow-y","height","min-height","addressContainerStyle","align-items","padding-left","padding-top","padding-bottom","addressInputContainerStyle","stacked","mounted","addEventListener","closeAddressCandidateList","handleWindowResize","watch","geocodeStatus","computed","shouldShowAddressHeader","fullScreenTopicsOnly","shouldShowGreeting","inputAlign","addressInput","position","addressInputWidth","width","addressInputPlaceholder","placeholder","addressAutocompleteEnabled","autocompleteEnabled","$store","topicPanelContainerClass","addressContainerClass","dorParcels","dor","address","activeDorAddress","defaultAddressTextPlaceholder","addressA","properties","street_address","addressB","zipCode","zip_code","zip4","zip_4","parts","join","methods","pixelAdjustment","topicsHeight","windowHeight","$","siteHeaderHeightNum","parseInt","document","getElementsByClassName","getBoundingClientRect","appFooterHeightNum","toString","prevActiveFeature","updateFeaturePrev","updateFeatureNext","featureIdPrev","featureIdNext","matchingLayerNext","matchingLayerPrev","layerMap","_layers","layers","values","layer","layerFeatureId","layerTableId","updateMarkerFillColor","bringMarkerToFront","locationMarker","latlng","radius","fillColor","color","weight","opacity","fillOpacity","markers","geocodeGeom","identifyFeature","addressMarker","coordinates","reverse","geocodeResult","topicMarker","activeTopicConfig","marker","markerPath","path","level","console","log","undefined","markerObject","circleMarkers","mapOverlay","getConfigForTable","items","style","item","geometry","x","props","assign","_featureId","geojsonFeatures","pwdParcel","geojson","PARCELID","dorParcelFeatures","dorParcel","OBJECTID","apply","topicGeojson","geojsonPath","reactiveGeojsonFeatures","id","leafletMarkers","getTableFromComps","table","innerTable","circleMarker","el","_path","group","_renderer","_rootGroup","removeChild","appendChild","handleMarkerMouseover","e","commit","handleMarkerClick","handleMarkerMouseout","nextFillColor","fillColorForCircleMarker","nextStyle","setStyle","cyclomediaMixin","philaVueMapping","CyclomediaMixin","pictometryMixin","PictometryMixin","Map_","Control","EsriTiledMapLayer","EsriTiledOverlay","EsriDynamicMapLayer","EsriFeatureLayer","Geojson","CircleMarker","VectorMarker","PngMarker","BasemapToggleControl","BasemapSelectControl","FullScreenMapToggleTab","LocationControl","CyclomediaButton","PictometryButton","CyclomediaRecordingCircle","CyclomediaRecordingsClient","SvgViewConeMarker","MeasureControl","LegendControl","BasemapTooltip","ControlCorner","_vm","mixins","markersMixin","defaultAddress","$controller","goToDefaultAddress","$cyclomediaRecordingsClient","recordingsUrl","addressInputPosition","basemapSelectControlPosition","measureControlEnabled","mapPanelContainerClass","fullScreenMapOnly","cycloLatlng","cycloRotationAngle","cycloHFov","shouldShowCyclomediaButton","shouldShowPictometryButton","geolocationEnabled","activeDorParcel","legendControls","imageOverlayItems","overlayGroup","imageOverlayGroups","imageOverlayInfo","activeBasemap","tiledLayers","activeTiledOverlays","activeDynamicMaps","activeFeatureLayers","basemaps","imageryBasemaps","hasImageryBasemaps","shouldShowImageryToggle","geocodeType","configFeature","pwd","streetAddress","picOrCycloActive","cyclomediaActive","mapBounds","isGeocoding","value","setMapToBounds","$nextTick","invalidateSize","featureArray","zoomToShape","includes","L.featureGroup","configForBasemap","shouldShowGeojson","shouldShowImageOverlay","shouldShowFeatureLayer","handleMapClick","handleMapMove","getCenter","getZoom","markerId","CyclomediaWidget","PictometryWidget","Layer","PictometryLayer","ViewCone","PictometryViewCone","PictometryPngMarker","Popover","TopicPanel","MapPanel","mbRootStyle","panels","appDidLoad","rootClass","plugin","shouldLoadCyclomediaWidget","shouldLoadPictometryWidget","shouldShowTopicPanel","shouldShowMapPanel","pictometryActive","pictometryZoom","pictometryShowAddressMarker","geocodeData","ak","host","hostname","apiKey","pictometryDev","pictometryCity","pictometryCityDev","pictometryLocal","sk","secretKey","nextValue","isObject","Array","isArray","mergeDeep","target","source","output","forEach","generateUniqueId","Math","random","substring","controllerMixin","philaVueDatafetch","assignTableIds","assignHorizontalTableGroupIds","horizontalTableGroupId","initMapboard","clientConfig","baseConfigUrl","baseConfig","axios","get","then","response","baseConfigFn","eval","gatekeeperKey","configMixin","store","vm","h","Mapboard","catch","err","error"],"mappings":"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"}